<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>gin学习</title>
    <url>/2023/08/06/gin%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	&quot;github.com/gin-gonic/gin&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">	// 创建一个默认的路由引擎</span><br><span class="line">	r := gin.Default()</span><br><span class="line"></span><br><span class="line">    //链接数据库的代码</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">	// GET：请求方式；/hello：请求的路径</span><br><span class="line">	// 当客户端以GET方法请求/hello路径时，会执行后面的匿名函数,用来接受返回值</span><br><span class="line">	</span><br><span class="line">	r.GET(&quot;/hello&quot;, func(c *gin.Context) &#123;</span><br><span class="line">		// c.JSON：返回JSON格式的数据</span><br><span class="line">		c.JSON(200, gin.H&#123;</span><br><span class="line">			&quot;message&quot;: &quot;Hello world!&quot;,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">	// 启动HTTP服务，默认在0.0.0.0:8080启动服务</span><br><span class="line">	r.Run()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="RESTful-API"><a href="#RESTful-API" class="headerlink" title="RESTful API"></a>RESTful API</h2><ul>
<li><code>GET</code>用来获取资源</li>
<li><code>POST</code>用来新建资源</li>
<li><code>PUT</code>用来更新资源</li>
<li><code>DELETE</code>用来删除资源。</li>
</ul>
<h2 id="Gin渲染"><a href="#Gin渲染" class="headerlink" title="Gin渲染"></a>Gin渲染</h2><ol>
<li>HTML渲染<br>Gin框架中使用<code>LoadHTMLGlob()</code>或者<code>LoadHTMLFiles()</code>方法进行HTML模板渲染。</li>
<li>静态文件处理<br>当我们渲染的HTML文件中引用了静态文件时，我们只需要按照以下方式在渲染页面前调用<code>gin.Static</code>方法即可。</li>
</ol>
<blockquote>
<p>可以参考[[页面]]</p>
</blockquote>
<h2 id="获取参数"><a href="#获取参数" class="headerlink" title="获取参数"></a>获取参数</h2><ol>
<li>获取querystring参数<br><code>querystring</code>指的是URL中<code>?</code>后面携带的参数，例如：<code>/user/search?username=小王子&amp;address=沙河</code>。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">	//Default返回一个默认的路由引擎</span><br><span class="line">	r := gin.Default()</span><br><span class="line">	r.GET(&quot;/user/search&quot;, func(c *gin.Context) &#123;</span><br><span class="line">		username := c.DefaultQuery(&quot;username&quot;, &quot;小王子&quot;)</span><br><span class="line">		//username := c.Query(&quot;username&quot;)</span><br><span class="line">		address := c.Query(&quot;address&quot;)</span><br><span class="line">		//输出json结果给调用方</span><br><span class="line">		c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">			&quot;message&quot;:  &quot;ok&quot;,</span><br><span class="line">			&quot;username&quot;: username,</span><br><span class="line">			&quot;address&quot;:  address,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">	r.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>获取form参数<br>当前端请求的数据通过form表单提交时，例如向<code>/user/search</code>发送一个POST请求，获取请求数据的方式<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">	//Default返回一个默认的路由引擎</span><br><span class="line">	r := gin.Default()</span><br><span class="line">	r.POST(&quot;/user/search&quot;, func(c *gin.Context) &#123;</span><br><span class="line">		// DefaultPostForm取不到值时会返回指定的默认值</span><br><span class="line">		//username := c.DefaultPostForm(&quot;username&quot;, &quot;小王子&quot;)</span><br><span class="line">		username := c.PostForm(&quot;username&quot;)</span><br><span class="line">		address := c.PostForm(&quot;address&quot;)</span><br><span class="line">		//输出json结果给调用方</span><br><span class="line">		c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">			&quot;message&quot;:  &quot;ok&quot;,</span><br><span class="line">			&quot;username&quot;: username,</span><br><span class="line">			&quot;address&quot;:  address,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">	r.Run(&quot;:8080&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>获取path参数<br>请求的参数通过URL路径传递，例如：<code>/user/search/小王子/沙河</code>。 获取请求URL路径中的参数的方式如下。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">	//Default返回一个默认的路由引擎</span><br><span class="line">	r := gin.Default()</span><br><span class="line">	r.GET(&quot;/user/search/:username/:address&quot;, func(c *gin.Context) &#123;</span><br><span class="line">		username := c.Param(&quot;username&quot;)</span><br><span class="line">		address := c.Param(&quot;address&quot;)</span><br><span class="line">		//输出json结果给调用方</span><br><span class="line">		c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">			&quot;message&quot;:  &quot;ok&quot;,</span><br><span class="line">			&quot;username&quot;: username,</span><br><span class="line">			&quot;address&quot;:  address,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	r.Run(&quot;:8080&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Gin-路由"><a href="#Gin-路由" class="headerlink" title="Gin 路由"></a>Gin 路由</h2><ol>
<li>普通路由</li>
</ol>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li><a href="https://www.cnblogs.com/jiujuan/p/9388507.html#:~:text=%E4%B8%89%EF%BC%9Agin%E7%9A%84%E4%BD%BF%E7%94%A8%203.1.%201%E3%80%81%E5%85%A5%E9%97%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A4%BA%E4%BE%8B%203.2.%202%EF%BC%9A,gin%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%B7%AF%E7%94%B1%203.3.%203%E3%80%81%E8%8E%B7%E5%8F%96%E8%B7%AF%E7%94%B1%E7%9A%84%E5%8F%82%E6%95%B0%203.4.%204%EF%BC%9A%E8%A7%A3%E6%9E%90%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A">gin框架教程一: go框架gin的基本使用 - 九卷 - 博客园 (cnblogs.com)</a></li>
<li><a href="https://juejin.cn/post/7074857287289929765">Gin框架介绍及使用 - 掘金 (juejin.cn)</a></li>
</ol>
]]></content>
      <categories>
        <category>golang笔记</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>gin</tag>
      </tags>
  </entry>
  <entry>
    <title>goto的替代</title>
    <url>/2022/03/26/goto%E7%9A%84%E6%9B%BF%E4%BB%A3/</url>
    <content><![CDATA[<h3 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h3><p>goto语句也称为无条件转移语句，当执行到goto语句后，程序将跳转到标签位置。例如下图：</p>
<p><img src="/2022/03/26/goto%E7%9A%84%E6%9B%BF%E4%BB%A3/goto1.png"></p>
<h3 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h3><p>使用 goto语句在同一函数内进行 goto跳转时, goto的起点应是函数内一段小功能的结束处，goto跳转的目的 label处应是函数内另外一段小功能的开始处。</p>
<h3 id="三、优缺点"><a href="#三、优缺点" class="headerlink" title="三、优缺点"></a>三、优缺点</h3><ol>
<li>优点：使用goto语句，可以更改程序执行的正常顺序，因此可以跳转到程序的任何部分。</li>
<li>缺点：</li>
</ol>
<ul>
<li>使用goto语句，因为它会使程序逻辑非常复杂，不易阅读。</li>
<li>使用goto使得分析和验证程序（尤其是涉及循环的程序）的正确性的任务非常困难。</li>
<li>使用 goto语句只能将 goto跳转到同一函数内，而不能从一个函数里跳转到另外一个函数里。</li>
<li>goto不能从一段复杂的执行状态中的位置跳转到另外一个位置</li>
</ul>
<h3 id="四、替换"><a href="#四、替换" class="headerlink" title="四、替换"></a>四、替换</h3><p>do while(1) 替换 goto</p>
]]></content>
      <categories>
        <category>课程笔记</category>
      </categories>
      <tags>
        <tag>c</tag>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>GoGC的回收机制和混合写屏障</title>
    <url>/2023/10/26/gogc%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol>
<li>GC是什么？为什么要有GC？</li>
<li>基础概念</li>
<li>golang的GC</li>
<li>如何标记</li>
<li>GoV1.3 标记清除法</li>
<li>三色标记法</li>
<li>插入写屏障</li>
<li>删除写屏障</li>
<li>混合写屏障</li>
</ol>
<h2 id="GC是什么？为什么要有GC？"><a href="#GC是什么？为什么要有GC？" class="headerlink" title="GC是什么？为什么要有GC？"></a>GC是什么？为什么要有GC？</h2><p><em>GC</em> 是 garbage collection 的缩写,意思是垃圾回收。</p>
<ul>
<li>GC是编程语言中提供的自动的内存管理机制，自动释放不需要的内存对象，让出存储器资源。</li>
<li>GC过程中无需程序员手动执行。GC机制在现代<strong>很多编程语言</strong>都支持(Java/python/golang)，GC能力的性能与优劣也是不同语言之间对比度指标之一。</li>
</ul>
<p>前面说现在很多语言都有GC机制，但是在我们大一学的c++却是没有的一个标准库，所以在当时我们要自己创建内存空间和销毁，可以使我们更好了解底层原理。</p>
<p>但是全部都要我们程序员自己造轮子，这也太麻烦了。且内存处理是开发人员容易出现问题的地方，所以现在很多语言都提供了自己的垃圾回收装置</p>
<h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><p> <strong>一个标准进程的内存模型</strong></p>
<ul>
<li>code area（方法区）</li>
<li>static area 静态变量</li>
<li>heap (堆)</li>
<li>stack (栈)<br><img src="/2023/10/26/gogc%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/gc1.png"><br>golang程序，是一个进程</li>
</ul>
<ul>
<li>一个进程对应着多个OS线程，又根据[[MPG模型]]，对应着很多个协程；</li>
<li>对所有的goroutinue来说，heap可以看作是共享的区域</li>
<li>但是每个goroutinue，都有只属于自己的stack</li>
</ul>
<p><strong>一般程序的内存管理</strong><br>stack会随着线程执行code area的stack frame，自动pop、push、remove；<br>stack里的变量、调用完毕，就随着出栈，自动销毁；<br>但是heap不会，heap内的对象，通常是用stack内或者其它heap对象内的指针变量，对heap内的对象进行操作；<br>这个也叫做对象引用；<br>垃圾回收，garbage collect，回收的就是heap的空间</p>
<h2 id="如何标记"><a href="#如何标记" class="headerlink" title="如何标记"></a>如何标记</h2><p>在 GC 领域里，判断对象存活的主流思路是两个，「引用计数」和「可达性分析」。</p>
<ol>
<li><p> <strong>引用计数</strong><br>顾名思义，引用计数的思路就是给每个对象进行计数，每被其它对象引用一次，计数就 +1，引用失效后，计数就 -1。当计数器的数值为 0，就意味着它没有被使用，可以回收。</p>
</li>
<li><p><strong>可达性分析</strong><br>可达性分析的思路就是通过引用链路判断对象是否可被触达，如果能触达说明该对象当前正在被使用，不可回收;反之，没有触达到的对象则认为是无使用的，可以回收。</p>
</li>
</ol>
<p>这个引用链路的结构类似于有向有环图，但是根节点不止一个，是一个集合，称之为 GCRoots。</p>
<p>目前主流的 GC 机制大多用的是「可达性分析」这条路线，我们Golang 的GC机制也是如此。</p>
<p>为什么引用计数不好用呢?<br>因为它有一个特别严重的问题：<strong>无法处理循环引用。</strong></p>
<h2 id="清除-mark-and-sweep-算法"><a href="#清除-mark-and-sweep-算法" class="headerlink" title="清除(mark and sweep)算法"></a>清除(mark and sweep)算法</h2><p>主要的步骤：</p>
<ul>
<li>标记(Mark phase)</li>
<li>清除(Sweep phase)</li>
</ul>
<h3 id="标记清除算法的具体步骤："><a href="#标记清除算法的具体步骤：" class="headerlink" title="标记清除算法的具体步骤："></a>标记清除算法的具体步骤：</h3><p><strong>第一步</strong>，暂停程序业务逻辑, 遍历gcRoot，分类出可达和不可达的对象，然后做上标记。<br><img src="/2023/10/26/gogc%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/gc2.png"></p>
<ul>
<li>可达对象：从程序根节点出发，可以到达的对象 如1-2-3，4-7</li>
<li>不可达的对象：反之 5 6</li>
</ul>
<p><strong>第二步</strong>, 开始标记，程序找出它所有可达的对象，并做上标记<br><strong>第三步</strong>,  标记完了之后，然后开始清除未标记的对象. 结果如下。<br><img src="/2023/10/26/gogc%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/gc3.png"><br>操作非常简单，但是有一点需要额外注意：mark and sweep算法在执行的时候，需要程序暂停！<br>即 <code>STW(stop the world)</code>，STW的过程中，CPU不执行用户代码，全部用于垃圾回收，这个过程的影响很大，所以STW也是一些回收机制最大的难题和希望优化的点。所以在执行第三步的这段时间，程序会暂定停止任何工作，卡在那等待回收执行完毕。</p>
<p><strong>第四步</strong>, 停止暂停，让程序继续跑。然后循环重复这个过程，直到process程序生命周期结束。</p>
<p>以上便是标记-清除（mark and sweep）回收的算法。</p>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>标记清除算法明了，过程鲜明干脆，但是通过上面的步骤演示，我们也能发现它存在严重的问题：</p>
<ul>
<li>STW，stop the world；让程序暂停，程序出现卡顿 **(重要问题)**；</li>
<li>标记需要扫描整个heap；</li>
<li>清除数据会产生heap碎片。</li>
</ul>
<p>因为[[GC回收机制-01]]中提到了heap可以看作是所有的goroutinue共享的区域，因此我们需要扫描整个heap（heap碎片这个概念其实可以类比我们学习的操作系统中的内存碎片）</p>
<p>Go V1.3版本之前：</p>
<p><img src="/2023/10/26/gogc%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/gc4.png"></p>
<p>Go V1.3 做了简单的优化,将STW的步骤提前, 减少STW暂停的时间范围.</p>
<p><img src="/2023/10/26/gogc%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/gc5.png"></p>
<p>但是无论怎么优化，Go V1.3都面临这个一个重要问题，就是<strong>mark-and-sweep 算法会暂停整个程序</strong> 。</p>
<p>Go是如何面对并这个问题的呢？接下来G V1.5版本 就用<strong>三色并发标记法</strong>来优化这个问题.</p>
<p>后面的内容为手写笔记</p>
<h2 id="三色标记法"><a href="#三色标记法" class="headerlink" title="三色标记法"></a>三色标记法</h2><p><img src="/2023/10/26/gogc%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/gc6.jpg"><br><img src="/2023/10/26/gogc%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/gc7.jpg"></p>
<h2 id="插入写屏障"><a href="#插入写屏障" class="headerlink" title="插入写屏障"></a>插入写屏障</h2><p><img src="/2023/10/26/gogc%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/gc8.jpg"></p>
<h2 id="删除写屏障-amp-混合写屏障"><a href="#删除写屏障-amp-混合写屏障" class="headerlink" title="删除写屏障&amp;混合写屏障"></a>删除写屏障&amp;混合写屏障</h2><p><img src="/2023/10/26/gogc%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/gc9.jpg"><br><img src="/2023/10/26/gogc%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/gc10.jpg"><br><img src="/2023/10/26/gogc%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/gc11.jpg"></p>
]]></content>
      <categories>
        <category>golang笔记</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>gc</tag>
      </tags>
  </entry>
  <entry>
    <title>Go Web简单实战</title>
    <url>/2023/08/20/goweb%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<h1 id="社区话题demo"><a href="#社区话题demo" class="headerlink" title="社区话题demo"></a>社区话题demo</h1><p>**此项目使用<code>Gin</code>+<code>Gorm</code>+<code>mysql</code> ，基于<code>RESTful API</code>实现的一个社区话题评论demo。</p>
<p>项目仓库：<a href="https://github.com/Zqxg/community_demo">Zqxg/community_demo (github.com)</a></p>
<h2 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h2><ol>
<li>支持发布帖子（增）</li>
<li>支持删除帖子（删）</li>
<li>帖子话题运行修改（改）</li>
<li>展示话题（标题、文字描述）和回帖列表（查）</li>
</ol>
<ul>
<li>话题和回帖数据使用mysql数据库</li>
</ul>
<h2 id="项目功能介绍"><a href="#项目功能介绍" class="headerlink" title="项目功能介绍"></a>项目功能介绍</h2><ul>
<li>新增/删除/修改/查询 话题</li>
<li>新增/删除/修改/查询 评论</li>
</ul>
<p>后续添加用户注册登录功能</p>
<h2 id="接口文档"><a href="#接口文档" class="headerlink" title="接口文档"></a>接口文档</h2><p><a href="https://console-docs.apipost.cn/preview/7cdfdb30d3008cd4/8f13a469d4be6339">接口文档</a></p>
<h2 id="项目依赖"><a href="#项目依赖" class="headerlink" title="项目依赖"></a>项目依赖</h2><p>GO 1.20.1</p>
<ol>
<li>gin</li>
<li>gorm</li>
<li>mysql</li>
<li>ini</li>
</ol>
<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── api       //api接口：错误信息、话题模块、评论模块</span><br><span class="line">├── cmd       //程序启动</span><br><span class="line">├── conf      //相关配置</span><br><span class="line">├── models    //初始化、结构体</span><br><span class="line">├── routes    //路由逻辑处理</span><br><span class="line">├── serializer//序列化</span><br><span class="line">└── service   //接口函数的实现</span><br></pre></td></tr></table></figure>

<h2 id="评论模块功能实现"><a href="#评论模块功能实现" class="headerlink" title="评论模块功能实现"></a>评论模块功能实现</h2><p> 数据库表一对多（唯一外键）</p>
<h2 id="开发问题"><a href="#开发问题" class="headerlink" title="开发问题"></a>开发问题</h2><ol>
<li>数据库连接中断</li>
</ol>
<ul>
<li>在设置数据库连接池前多写了个defer关闭了数据库，导致在创建方法前关闭了数据库</li>
</ul>
<ol start="2">
<li>评论模块数据库操作有问题，无法对应到相关的帖子下。怀疑是数据库操作有问题。</li>
</ol>
<ul>
<li>使用string查询条件<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var posts []models.Post  </span><br><span class="line">err = models.DB.Where(&quot;topic_id = ?&quot;, tid).Find(&amp;posts).Error</span><br></pre></td></tr></table></figure>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2></li>
</ul>
<ol>
<li><a href="https://blog.csdn.net/qq_34556414/article/details/130099428?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1-130099428-blog-107849953.235%5Ev38%5Epc_relevant_sort&spm=1001.2101.3001.4242.2&utm_relevant_index=4">(27条消息) Golang gorm 关联关系 一对多_golang 一对多查询_富士康质检员张全蛋的博客-CSDN博客</a></li>
<li><a href="https://gorm.io/zh_CN/docs/query.html#String-%E6%9D%A1%E4%BB%B6">查询 | GORM - The fantastic ORM library for Golang, aims to be developer friendly.</a></li>
<li><a href="https://github.com/CocaineCong/TodoList">https://github.com/CocaineCong/TodoList</a></li>
</ol>
]]></content>
      <categories>
        <category>golang笔记</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>gin</tag>
        <tag>web</tag>
        <tag>grom</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Go并发编程</title>
    <url>/2023/06/16/go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><p>Go 通过协程实现并发，协程之间靠信道通信</p>
<blockquote>
<p><a href="https://www.bilibili.com/video/BV1qT4y1c77u/?spm_id_from=333.337.search-card.all.click&vd_source=83dd43e74255c7f8534d577021ce91a6">用多线程给代码提速800% —— Golang高并发教程+实战_哔哩哔哩_bilibili</a></p>
</blockquote>
<h3 id="1-协程"><a href="#1-协程" class="headerlink" title="1.协程"></a>1.协程</h3><ul>
<li>协程（Goroutine）可以理解成轻量级的线程，但与线程相比，它的开销非常小。因此，Go 应用程序通常能并发地运行成千上万的协程。 Go 创建一个协程非常简单，只要在方法或函数调用之前加<strong>关键字 go</strong> 即可。<h4 id="goroutine"><a href="#goroutine" class="headerlink" title="goroutine"></a>goroutine</h4></li>
</ul>
<ol>
<li>创建一个数羊函数<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func count(n int, animal string) &#123;  </span><br><span class="line">   for i := 0; i &lt; n; i++ &#123;  </span><br><span class="line">      fmt.Println(i+1, animal)  </span><br><span class="line">      time.Sleep(time.Millisecond * 500)  </span><br><span class="line">   &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>并发运行<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func main() &#123;  </span><br><span class="line">   go count(3, &quot;羊&quot;)  </span><br><span class="line">   count(5, &quot;牛&quot;)  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
这就实现了一个简单的并发程序了。</li>
</ol>
<blockquote>
<p>如果将两个函数同时用goroutine运行，程序会怎样？</p>
</blockquote>
<p>golang中，主函数运行完毕，这个程序就结束了。不管创建了多少个goroutine，goroutine中<br>又创建了多少goroutine都会被终止。</p>
<blockquote>
<p>如果我们的程序需要等待goroutine运行完毕，才可以进行下一个任务，怎么办？</p>
</blockquote>
<h4 id="WaitGroup"><a href="#WaitGroup" class="headerlink" title="WaitGroup"></a>WaitGroup</h4><p>go语言为我们提供了一个很简单的工具——WaitGroup，相当于一个计数器，用来记录我们的goroutine，引用sync包后就可以使用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 修改主函数</span><br><span class="line">func main() &#123;  </span><br><span class="line">   var wg sync.WaitGroup  </span><br><span class="line">   wg.Add(2) //两个协程  </span><br><span class="line">   go func() &#123;  </span><br><span class="line">      count(3, &quot;羊&quot;)  </span><br><span class="line">      wg.Done() //运行结束-1  </span><br><span class="line">   &#125;()  </span><br><span class="line">   go func() &#123;  </span><br><span class="line">      count(5, &quot;牛&quot;)  </span><br><span class="line">      wg.Done() //运行结束-1  </span><br><span class="line">   &#125;()  </span><br><span class="line">	wg.Wait() //主函数结束前等待</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过waitgroup，我们保证了两个goroutine都可以运行完毕，而且不耽误额外的时间，但是上面这个代码并没有涉及数据传输。</p>
<blockquote>
<p>如果我们写一个同时运行多项任务的程序，如何让这些任务之间相互交流，传输数据？比如在这个例子中，我们想知道我们一共数了多少只动物？</p>
</blockquote>
<p>并发编程的根源在于对共享变量的操作，但是在操作的时候可能发生并发问题，可以使用锁来解决。</p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/93520927">操作系统-锁机制（转） - 知乎 (zhihu.com)</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/143797513">一篇把并发编程世界的所有“锁”讲明白 - 知乎 (zhihu.com)</a></li>
</ul>
<p>golang中不通过共享内存来交流，通过<strong>交流</strong>来共享内存。在go语言中，channel就是不同goroutine之间交流的途径。</p>
<h3 id="2-Channel"><a href="#2-Channel" class="headerlink" title="2.Channel"></a>2.Channel</h3><p>channel 是 goroutine 与 goroutine 之间通信的重要桥梁，借助 channel，我们能很轻易的写出一个<strong>多协程</strong>通信程序。<br><a href="https://zhuanlan.zhihu.com/p/395278270">golang 系列：channel 全面解析 - 知乎 (zhihu.com)</a></p>
<ol>
<li><p>channel创建</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ch := make(chan int)</span><br></pre></td></tr></table></figure>
<p>上面创建的是<strong>无缓冲</strong>的 channel，一旦有 goroutine 往 channel 发送数据，那么当前的 goroutine 会被阻塞住，直到有其他的 goroutine 消费了 channel 里的数据，才能继续运行。</p>
</li>
<li><p>channel的读写操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ch &lt;- 1 //写</span><br><span class="line">data &lt;- ch //读</span><br></pre></td></tr></table></figure></li>
<li><p>channel的关闭<br>使用close()函数就可以实现channel的关闭。</p>
</li>
</ol>
<p>可以利用这些特性来同步我们的代码,我们先用一个channel实现数羊这个任务：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func main() &#123;  </span><br><span class="line">   c := make(chan string)  </span><br><span class="line">   go count(5, &quot;羊&quot;, c)  </span><br><span class="line">   for message := range c &#123;  </span><br><span class="line">      fmt.Println(message)  </span><br><span class="line">   &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">func count(n int, animal string, c chan string) &#123;  </span><br><span class="line">   for i := 0; i &lt; n; i++ &#123;  </span><br><span class="line">      c &lt;- animal  </span><br><span class="line">      time.Sleep(time.Millisecond * 500)  </span><br><span class="line">   &#125;  </span><br><span class="line">   close(c)  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在我们知道如何从一个channel中发送数据和接收数据了。</p>
<blockquote>
<p>那我们怎么从多个channel中接收消息呢？</p>
</blockquote>
<h4 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h4><p>在写程序时，有时并不单单只会和一个 goroutine 通信，当我们要进行多 goroutine 通信时，则会使用 select 写法来管理多个 channel 的通信数据，他会看case里面有哪个不阻塞，可以被直接运行的，就选择哪个运行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ch1 := make(chan struct&#123;&#125;)</span><br><span class="line"> ch2 := make(chan struct&#123;&#125;)</span><br><span class="line"></span><br><span class="line"> // ch1, ch2 发送数据</span><br><span class="line"> go sendCh1(ch1)</span><br><span class="line"> go sendCh1(ch2)</span><br><span class="line"></span><br><span class="line"> // channel 数据接受处理</span><br><span class="line"> for &#123;</span><br><span class="line">  select &#123;</span><br><span class="line">  case &lt;-ch1:</span><br><span class="line">   doSomething1()</span><br><span class="line">  case &lt;-ch2:</span><br><span class="line">   doSomething2()</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>golang笔记</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>Go基础语法</title>
    <url>/2023/06/10/go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h3 id="一、基础语法"><a href="#一、基础语法" class="headerlink" title="一、基础语法"></a>一、基础语法</h3><h4 id="（一）注释"><a href="#（一）注释" class="headerlink" title="（一）注释"></a>（一）注释</h4><ol>
<li>单行注释：<code>//</code> 与c类似</li>
<li>多行注释:<code>/* */</code> 与c类似</li>
</ol>
<h4 id="（二）输出和输入"><a href="#（二）输出和输入" class="headerlink" title="（二）输出和输入"></a>（二）输出和输入</h4><ol>
<li><p>先引入fmt包：import “fmt”</p>
</li>
<li><p>输出</p>
</li>
</ol>
<ul>
<li>fmt.Println() 打印并换行</li>
<li>fmt.Printf()  格式化输出</li>
<li>fmt.Print()   打印输出<blockquote>
<p>其中P要大写</p>
</blockquote>
</li>
</ul>
<p>3.输入</p>
<ul>
<li>fmt.Scanln() 接受输入</li>
<li>fmt.Scanf()   格式化输入</li>
<li>fmt.Scan()    接受输入<blockquote>
<p>fmt.Scanln(&amp;x,&amp;y) 变量取地址 &amp;变量</p>
</blockquote>
</li>
</ul>
<h4 id="（三）变量"><a href="#（三）变量" class="headerlink" title="（三）变量"></a>（三）变量</h4><ol>
<li>定义变量：var 变量名 数据类型<br><img src="https://pic3.zhimg.com/80/v2-ee02aab23f99583ffa7fa777f612caae_720w.webp"></li>
</ol>
<ul>
<li><p>同时定义多个变量：使用var加<code>()</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var(</span><br><span class="line">	name string</span><br><span class="line">	age int</span><br><span class="line">	addr string</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>可以同时给多个变量定义：如<code>var a,b,c *int</code>指同时定义指针变量abc，这在c中是无法实现的</p>
</blockquote>
</li>
<li><p><code>:=</code> 是直接定义变量加赋值<br>可以将 var f string = “Runoob” 简写为 f := “Runoob”：</p>
<blockquote>
<p>编译器自动推导数据类型</p>
</blockquote>
</li>
</ul>
<ol>
<li>变量初始化：</li>
</ol>
<ul>
<li> 1 未初始化变量：<strong>变量默认为零值</strong><blockquote>
<p>零值：数值类型为 <strong>0</strong> 、布尔类型为 <strong>false</strong>、字符串为 **””**（空字符串）</p>
</blockquote>
</li>
<li>2 自判定变量类型：var v_name = value</li>
<li>3 var 声明过了，<strong>不能</strong>再使用 := 声明变量</li>
</ul>
<h4 id="（四）赋值"><a href="#（四）赋值" class="headerlink" title="（四）赋值"></a>（四）赋值</h4><ol>
<li>值类型赋值：直接指向存在内存中的值 </li>
<li>变量赋值变量：只赋值了引用地址</li>
</ol>
<h4 id="（五）变量交换"><a href="#（五）变量交换" class="headerlink" title="（五）变量交换"></a>（五）变量交换</h4><p>在c语言和java语言中，两个变量的值交换需要借到第三个变量的帮助，如c语言中交换ab的值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int a=100,b=200,temp=0;</span><br><span class="line">temp=a;</span><br><span class="line">a=b;</span><br><span class="line">b=temp;</span><br></pre></td></tr></table></figure>
<p>但是在go语言中，不需要第三个变量，就可以直接交换，如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var a int = 100</span><br><span class="line">var b int = 200</span><br><span class="line">b,a = a,b</span><br></pre></td></tr></table></figure>
<h3 id="二、变量"><a href="#二、变量" class="headerlink" title="二、变量"></a>二、变量</h3><h4 id="（一）匿名变量"><a href="#（一）匿名变量" class="headerlink" title="（一）匿名变量"></a>（一）匿名变量</h4><ol>
<li><p>定义：没有名称的变量。</p>
</li>
<li><p>写法：使用匿名变量时，只需要在变量声明的地方使用下画线<code>_</code>替换即可，如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func GetData() (int, int) &#123; </span><br><span class="line">	return 100, 200 </span><br><span class="line">&#125; </span><br><span class="line">func main()&#123; </span><br><span class="line">	a, _ := GetData() </span><br><span class="line">	_, b := GetData() </span><br><span class="line">	fmt.Println(a, b) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>匿名变量不占用内存空间，不会分配内存</strong>。<strong>匿名变量和匿名变量之间也不会因为多次声明而无法使用</strong></p>
</li>
</ol>
<h4 id="（二）变量作用域"><a href="#（二）变量作用域" class="headerlink" title="（二）变量作用域"></a>（二）变量作用域</h4><ol>
<li><p>局部变量：在函数内部定义，其使用范围就只能在当前函数中。在其他函数中使用会报错。</p>
</li>
<li><p>全局变量：在函数外定义，其使用范围是所有函数。</p>
</li>
<li><p>局部变量与全局变量可以使用同一个名字，但是由于优先原则，在有局部变量的函数内部会优先使用局部变量。</p>
</li>
</ol>
<h3 id="三、常量"><a href="#三、常量" class="headerlink" title="三、常量"></a>三、常量</h3><h4 id="（一）定义"><a href="#（一）定义" class="headerlink" title="（一）定义"></a>（一）定义</h4><ol>
<li>定义常量：<code>const 常量名 数据类型 = 值</code></li>
</ol>
<ul>
<li>显式定义：不省略数据类型</li>
<li>隐式定义：省略数据类型<blockquote>
<p>常量中的数据类型只可以是布尔型、数字型（整数型、浮点型和复数）和字符串型。</p>
</blockquote>
</li>
</ul>
<ol start="2">
<li><p>多个常量定义：使用constant加<code>()</code>，用法与多个变量定义一样</p>
</li>
<li><p><strong>iota</strong>：特殊常量，可以认为是一个可以被编译器<strong>修改的常量</strong></p>
</li>
</ol>
<ul>
<li>iota 在 const关键字出现时将被重置为 0(const 内部的第一行之前)，const 中每新增一行常量声明将使 iota 计数一次<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main  </span><br><span class="line">  </span><br><span class="line">import &quot;fmt&quot;  </span><br><span class="line">  </span><br><span class="line">func main() &#123;  </span><br><span class="line">    const (  </span><br><span class="line">            a = iota   //0  </span><br><span class="line">            b          //1  </span><br><span class="line">            c          //2  </span><br><span class="line">            d = &quot;ha&quot;   //独立值，iota += 1  </span><br><span class="line">            e          //&quot;ha&quot;   iota += 1  </span><br><span class="line">            f = 100    //iota +=1  </span><br><span class="line">            g          //100  iota +=1  </span><br><span class="line">            h = iota   //7,恢复计数  </span><br><span class="line">            i          //8  </span><br><span class="line">    )  </span><br><span class="line">    fmt.Println(a,b,c,d,e,f,g,h,i)  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
结果：0 1 2 ha ha 100 100 7 8</li>
</ul>
<h3 id="四、基本数据类型"><a href="#四、基本数据类型" class="headerlink" title="四、基本数据类型"></a>四、基本数据类型</h3><p><img src="https://img-blog.csdnimg.cn/b6fec2eae1d94d47b4b53f187fb49a72.png"></p>
<h4 id="（一）布尔类型"><a href="#（一）布尔类型" class="headerlink" title="（一）布尔类型"></a>（一）布尔类型</h4><p>布尔型的值只有true和false。</p>
<h4 id="（二）数字型"><a href="#（二）数字型" class="headerlink" title="（二）数字型"></a>（二）数字型</h4><ol>
<li>整型：无符号uint、有符号int</li>
</ol>
<ul>
<li>unit8 无符号8位、unit16 无符号16位、 unit32 无符号32位 uint64 无符号64位</li>
<li>int8 、int16、int32、int64 有符号…位<blockquote>
<p>无符号从0开始<br>一般定义的int是nit64</p>
</blockquote>
</li>
</ul>
<ol start="2">
<li>浮点型：</li>
</ol>
<ul>
<li>float32、float64</li>
<li>complex64（复数）：实数和虚数部分都是float32</li>
<li>complex128（复数）：实数和虚数部分都是float64<blockquote>
<p>go语言的浮点数是根据IEEE754规则的：浮点数=符号位+指数位+尾数位<br>使用float的进行计算的时候，可能造成尾数部分丢失没导致精度损失，所以一般不要使用float进行计算</p>
</blockquote>
</li>
</ul>
<ol start="3">
<li>字符串类型：string</li>
<li>其他数字类型：</li>
</ol>
<ul>
<li>byte：类似uint8   (无符号)<blockquote>
<p>byte常用来处理ascii字符</p>
</blockquote>
</li>
<li>rune是内置类型，是int32类型的别名 （有符号）<blockquote>
<p>rune可以处理utf-8字符</p>
</blockquote>
<h4 id="（三）数据类型转换"><a href="#（三）数据类型转换" class="headerlink" title="（三）数据类型转换"></a>（三）数据类型转换</h4></li>
</ul>
<p><strong>go语言中所有转换都是显示转换，不支持隐式转换</strong></p>
<ol>
<li><p>定义：type_name(expression)</p>
<blockquote>
<p>“type_name”为类型名，“expression”为表达式</p>
</blockquote>
</li>
<li><p>范围：类型转换从一个取值范围较小的类型转换到一个取值范围较大的类型。</p>
<blockquote>
<p>较大变较小的类型时（将 int32 转换为 int16 或将 float32 转换为 int），会发生精度丢失的情况。</p>
</blockquote>
</li>
<li><p>只有相同底层类型的变量之间可以进行相互转换（如将 int16 类型转换成 int32 类型），不同底层类型的变量相互转换时会引发<strong>编译错误（如将 bool 类型转换为 int 类型）</strong></p>
</li>
</ol>
<h3 id="五、运算符"><a href="#五、运算符" class="headerlink" title="五、运算符"></a>五、运算符</h3><h4 id="（一）算数运算符"><a href="#（一）算数运算符" class="headerlink" title="（一）算数运算符"></a>（一）算数运算符</h4><ol>
<li>+、-、* 、/、%、++、– 与c的算数运算符一样</li>
<li>返回结果是bool型</li>
</ol>
<h4 id="（二）关系运算符"><a href="#（二）关系运算符" class="headerlink" title="（二）关系运算符"></a>（二）关系运算符</h4><p>同c一样</p>
<h4 id="（三）逻辑运算符"><a href="#（三）逻辑运算符" class="headerlink" title="（三）逻辑运算符"></a>（三）逻辑运算符</h4><p>与或非，同c一样</p>
<h4 id="（四）位运算符"><a href="#（四）位运算符" class="headerlink" title="（四）位运算符"></a>（四）位运算符</h4><p><strong>建立在二进制上，比较二进制的0和1</strong></p>
<ol>
<li>位运算符 &amp;(与), |(或), ^(异或)</li>
<li>计算<table>
<thead>
<tr>
<th>p</th>
<th>q</th>
<th>p&amp;q</th>
<th>p1q</th>
<th>p^q</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
</tbody></table>
</li>
</ol>
<h4 id="（五）赋值运算符"><a href="#（五）赋值运算符" class="headerlink" title="（五）赋值运算符"></a>（五）赋值运算符</h4><ol>
<li>C += A 等于 C = C + A</li>
<li>C -= A 等于 C = C - A</li>
<li>C * = A 等于 C = C * A</li>
<li>C /= A 等于 C = C / A</li>
<li>C %= A 等于 C = C % A</li>
<li>C &lt;&lt;= 2 等于 C = C &lt;&lt; 2</li>
<li>C &gt;&gt;= 2 等于 C = C &gt;&gt; 2</li>
<li>C &amp;= 2 等于 C = C &amp; 2</li>
<li>C ^= 2 等于 C = C ^ 2</li>
<li>C |= 2 等于 C = C | 2</li>
</ol>
<h4 id="（六）其他运算符"><a href="#（六）其他运算符" class="headerlink" title="（六）其他运算符"></a>（六）其他运算符</h4><ol>
<li>&amp;a：将给出变量的实际地址。</li>
<li><ul>
<li>a：是一个指针变量。</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>golang笔记</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Go基础实践</title>
    <url>/2023/06/12/go%E5%9F%BA%E7%A1%80%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<p><a href="https://geektutu.com/post/quick-golang.html">Go 语言简明教程 | 快速入门 | 极客兔兔 (geektutu.com)</a></p>
<h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><ol>
<li><p>语法基础<br>[[Go基础语法]]</p>
</li>
<li><p>接口：</p>
</li>
</ol>
<ul>
<li>Go接口是一组方法的集合</li>
<li>不包含方法的实现<blockquote>
<p><a href="https://juejin.cn/post/7060471869085843487">《Go语言原来这么简单》 – 接口 - 掘金 (juejin.cn)</a></p>
</blockquote>
</li>
</ul>
<ol start="3">
<li><p>json数据操作：</p>
<blockquote>
<p><a href="https://juejin.cn/post/7052994046209294350#heading-14">Golang 基础之json数据操作 - 掘金 (juejin.cn)</a></p>
</blockquote>
</li>
<li><p>并发：</p>
</li>
</ol>
<ul>
<li>两个或两个以上的任务在一段时间内被执行。</li>
<li>CSP并发模型：通过<code>goroutine</code>和<code>channel</code>实现<blockquote>
<p>操作系统没学好，重新复习<br><a href="https://juejin.cn/post/6844903790131281934">Go并发原理 - 掘金 (juejin.cn)</a></p>
</blockquote>
</li>
</ul>
<ol start="5">
<li>http协议：</li>
</ol>
<ul>
<li>HTTP是一个客户端（用户）和服务端（网站）之间请求和应答的标准。  </li>
<li>在HTTP协议中客户端发送请求接收响应，服务端接收请求发送响应，在HTTP中数据可以被称为资源可以是HTML文档、图片、普通文本等。</li>
<li>资源是通过URL来进行定位的，URL的组成部分包括：<strong>协议+ 主机（host）+ 路径（path）+ 查询参数（query）</strong></li>
<li>发送HTTP请求的内容包括：请求方式（GET\POST\PUT\HEAD）、路径（path）和查询参数、HTTP版本、Request Header请求头、Request Body请求体(POST)  </li>
<li>接收HTTP响应包含：HTTP版本、响应状态码、Request Header响应头（包含额外的信息告诉客户端如何控制缓存和cookie），响应体（从服务端返回的数据）  </li>
<li>HTTP是无状态的，每一次请求都认为是从全新的客户端发来的请求，如果需要记录状态的话需要cookie和session来保持会话  <blockquote>
<p><a href="https://juejin.cn/post/6857020937737502727">go语言发送http请求 - 掘金 (juejin.cn)</a></p>
</blockquote>
</li>
</ul>
<h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><h3 id="1-猜谜小游戏"><a href="#1-猜谜小游戏" class="headerlink" title="1.猜谜小游戏"></a>1.猜谜小游戏</h3><h4 id="项目介绍："><a href="#项目介绍：" class="headerlink" title="项目介绍："></a>项目介绍：</h4><p>使用 Golang 来构建一个猜数字游戏。在这个游戏里面，程序首先会生成一个介于 1 到 100 之间的随机整数，然后提示玩家进行猜测。玩家每次输入一个数字，程序会告诉玩家这个猜测的值是高于还是低于那个秘密的随机数，并且让玩家再次猜测。如果猜对了，就告诉玩家胜利并且退出程序。</p>
<h4 id="学习："><a href="#学习：" class="headerlink" title="学习："></a>学习：</h4><p>随机数、随机数种子</p>
<h4 id="实现步骤："><a href="#实现步骤：" class="headerlink" title="实现步骤："></a>实现步骤：</h4><ol>
<li>随机数生成：</li>
</ol>
<ul>
<li>导入生成随机数需要的 math/rand 包，并以时钟作为参数初始化随机数种子</li>
<li>变量maxNum 作为随机数生成范围</li>
</ul>
<blockquote>
<p>一开始使用rand.Seed()为随机数种子，结果发现Go 1.2 0以来它被弃用了，改用rand.New(rand.NewSource(seed))，注：NewSource 默认是并发不安全<br><a href="https://www.163.com/dy/article/HGH6ND560518R7MO.html">如何正确使用随机数？|调用|rand|代码_网易订阅 (163.com)</a></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 随机数生成  </span><br><span class="line">func random(numMax int) (num int) &#123;  </span><br><span class="line">   rand.New(rand.NewSource(time.Now().UnixNano())//以当前纳秒数作为随机数种子  </span><br><span class="line">   num = rand.Intn(numMax + 1) //[0,numMax]  </span><br><span class="line">   return num  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li><p>用户输入数字：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var guessNumber int  </span><br><span class="line">fmt.Println(&quot;输入你猜的数：&quot;)  </span><br><span class="line">fmt.Scanf(&quot;%d &quot;, &amp;guessNumber)</span><br></pre></td></tr></table></figure></li>
<li><p>判断是否正确 ：<br>将用户输入的数字与本次程序生成的随机数比较，不相等返回大于或小于。用户重新输入数字猜测，直到用户输入正确。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 判断是否猜对  </span><br><span class="line">//参数secNumber本轮随机数，gusNumber用户猜测数</span><br><span class="line">//返回s文本，flag猜中为true</span><br><span class="line">func judgment(secNumber, gusNumber int) (s string, flag bool) &#123;  </span><br><span class="line">   if gusNumber &lt; secNumber &#123;  </span><br><span class="line">      s = &quot;你猜的数比实际的小,再猜猜看&quot;  </span><br><span class="line">      flag = false  </span><br><span class="line">   &#125; else if gusNumber &gt; secNumber &#123;  </span><br><span class="line">      s = &quot;你猜的数比实际的大,再猜猜看&quot;  </span><br><span class="line">      flag = false  </span><br><span class="line">   &#125; else &#123;  </span><br><span class="line">      s = &quot;你猜对了，真是个小聪明！&quot;  </span><br><span class="line">      flag = true  </span><br><span class="line">   &#125;  </span><br><span class="line">   return s, flag  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>主程序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func main() &#123;  </span><br><span class="line">   //1.生成随机数  </span><br><span class="line">   numMax := 100  </span><br><span class="line">   secertNumber := random(numMax)  </span><br><span class="line">  </span><br><span class="line">   for &#123;  </span><br><span class="line">      //2.用户输入数字  </span><br><span class="line">      var guessNumber int  </span><br><span class="line">      fmt.Println(&quot;输入你猜的数：&quot;)  </span><br><span class="line">      fmt.Scanf(&quot;%d &quot;, &amp;guessNumber)  </span><br><span class="line">  </span><br><span class="line">      //3.判断是否猜对  </span><br><span class="line">      s, flag := judgment(secertNumber, guessNumber)  </span><br><span class="line">      fmt.Println(s)  </span><br><span class="line">      if flag == true &#123; //猜对跳出循环  </span><br><span class="line">         break  </span><br><span class="line">      &#125; else &#123; //猜错接着猜  </span><br><span class="line">         continue  </span><br><span class="line">      &#125;  </span><br><span class="line">   &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="2-在线词典"><a href="#2-在线词典" class="headerlink" title="2.在线词典"></a>2.在线词典</h3><h4 id="项目介绍：-1"><a href="#项目介绍：-1" class="headerlink" title="项目介绍："></a>项目介绍：</h4><p>用户可以在命令行里面查询一个单词。此程序通过调用第三方的 API在线查询单词的翻译并打印出来。</p>
<h4 id="学习：-1"><a href="#学习：-1" class="headerlink" title="学习："></a>学习：</h4><p>用 go 语言来发送 HTTP 请求、解析 json</p>
<h4 id="实现步骤：-1"><a href="#实现步骤：-1" class="headerlink" title="实现步骤："></a>实现步骤：</h4><ol>
<li>抓包：<br>本项目使用彩云翻译API实现在线翻译，开发者工具获取api</li>
</ol>
<ul>
<li>打开百度翻译网页：<a href="https://fanyi.caiyunapp.com/#/">彩云小译 - 在线翻译 (caiyunapp.com)</a></li>
<li>打开开发者工具，找到翻译接口请求 network-&gt;XHR-&gt;Header</li>
<li>找到查询单词的请求，HTTP 的 post 的请求</li>
<li>查看API 的返回结果，里面会有 dictionary、wikit 两个字段。我们需要用的结果主要在dictionary 字段里面，包括单词翻译、音标等信息。<br><img src="/2023/06/12/go%E5%9F%BA%E7%A1%80%E5%AE%9E%E8%B7%B5/%E5%BD%A9%E4%BA%91%E7%BF%BB%E8%AF%91api.png"></li>
</ul>
<ol start="2">
<li>Golang 发起 Post 请求<br>使用标准库中的 net/http 包来实现 POST 请求。实现 POST 请求的步骤有以下几步：</li>
</ol>
<ul>
<li>创建 http.Client<br>Golang 的标准库中有一个 http.Client 结构体，它封装了所有向 HTTP 服务器发起请求的方法。我们可以通过创建一个 http.Client 对象来发送请求。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//创建一个空的 http.Client 对象</span><br><span class="line">client := &amp;http.Client&#123;&#125;</span><br></pre></td></tr></table></figure></li>
<li>创建请求主体（Request Body）<br>请求主体是 HTTP 请求里面的主要内容,针对百度翻译API创建请求主体。<br>首先请求序列化：构造出来一个结构体dictRequest发送请求<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//发送的JSON数据的结构体类型  </span><br><span class="line">type dictRequest struct &#123;  </span><br><span class="line">   TransType string `json:&quot;trans_type&quot;` //翻译类型  </span><br><span class="line">   Source    string `json:&quot;source&quot;`     //翻译的单词  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
response反序列化：结构体dictResponse，将返回的 JSON 反序列化到结构体里面。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type BaiDuDictResponse struct &#123;  </span><br><span class="line">   TransResult struct &#123;  </span><br><span class="line">      （省略）</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li><p>创建请求对象（Request）<br>我们需要创建一个 http.Request 对象，设置请求的目标地址、请求方式和请求主体等信息。通过将请求主体设置到 http.Request 对象的 Body 字段，可以将请求主体提交到服务器。</p>
</li>
<li><p>发送请求<br>发送请求可以使用 http.Client 的 Do 方法，它返回一个 http.Response 对象和一个错误对象。我们需要根据错误信息来处理请求是否发送成功。如果成功发送了请求，可以通过 http.Response 对象获取服务器返回的 HTTP 状态码和响应主体等信息。</p>
</li>
<li><p>处理响应<br>当服务器返回响应后，我们需要对响应进行处理。观察那个 json 可以看出需要的结果是在 dict_result.simple_means 里的，用 for range 循环来迭代输出它。</p>
</li>
</ul>
<h3 id="3-SOCKS5代理服务器"><a href="#3-SOCKS5代理服务器" class="headerlink" title="3.SOCKS5代理服务器"></a>3.SOCKS5代理服务器</h3><p><a href="https://www.bilibili.com/video/BV1BB4y1m7Gi/?spm_id_from=333.788&vd_source=83dd43e74255c7f8534d577021ce91a6">Go手写SOCKS5代理服务器_哔哩哔哩_bilibili</a></p>
]]></content>
      <categories>
        <category>golang笔记</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>二分查找</title>
    <url>/2023/10/20/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
    <content><![CDATA[<h3 id="前提："><a href="#前提：" class="headerlink" title="前提："></a>前提：</h3><ol>
<li>有序数组</li>
<li>无重复元素<h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3>二分查找的基本思想是将目标值与数组中间的元素进行比较，如果目标值小于中间元素，则在数组的左半部分继续查找，否则在右半部分查找，不断缩小搜索范围，直到找到目标值或确定目标值不存在为止。</li>
</ol>
<h3 id="写法"><a href="#写法" class="headerlink" title="写法"></a>写法</h3><p>写二分法，区间的定义一般为两种，左闭右闭即<code>[left, right]</code>，或者左闭右开即<code>[left, right)</code></p>
<h4 id="left-right"><a href="#left-right" class="headerlink" title="[left, right]"></a>[left, right]</h4><p><strong>定义target在[left, right]区间</strong></p>
<ul>
<li>for (left &lt;= right) 要使用 &lt;= </li>
</ul>
<p><em>因为right是包含在区间内的，是可以取到right值的，left == right是有意义的。所以用&lt;=</em></p>
<ul>
<li>if (target &lt; arr[mid]) right = mid - 1 </li>
</ul>
<p><em>因为当前这个arr[mid]一定不是target，那么接下来要查找的左区间结束下标位置就是 middle - 1</em></p>
<p><strong>代码</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 算法：二分查找 (左闭右闭)  </span><br><span class="line">// 输入：数组arr，查询数值target  </span><br><span class="line">// 输出：返回数值target的下标，没有找到返回-1  </span><br><span class="line">func binarySearch1(arr []int, target int) int &#123;  </span><br><span class="line">   // 左右区间  </span><br><span class="line">   left := 0  </span><br><span class="line">   right := len(arr) - 1  </span><br><span class="line">   // 循环查找  </span><br><span class="line">   for left &lt;= right &#123;  </span><br><span class="line">      // 中间值 防止溢出  </span><br><span class="line">      mid := left + ((right - left) / 2)  </span><br><span class="line">      if target == arr[mid] &#123;  </span><br><span class="line">         //找到数值 返回索引  </span><br><span class="line">         return mid  </span><br><span class="line">      &#125; else if target &lt; arr[mid] &#123;  </span><br><span class="line">         // 数值在区间左边 修改右边界  </span><br><span class="line">         right = mid - 1  </span><br><span class="line">      &#125; else &#123;  </span><br><span class="line">         // 数值在区间右边 修改左边界  </span><br><span class="line">         left = mid + 1  </span><br><span class="line">      &#125;  </span><br><span class="line">   &#125;  </span><br><span class="line">   //找不到数值 返回-1  </span><br><span class="line">   return -1  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="left-right-1"><a href="#left-right-1" class="headerlink" title="[left,right)"></a>[left,right)</h4><p><strong>定义target在 <code>[ left, right) </code>区间</strong></p>
<ul>
<li>for (left &lt; right) 要使用 &lt;</li>
</ul>
<p>*因为right是不包含在区间内的，取不到right值，left == right-1是有意义的。所以这里用left &lt; right *</p>
<ul>
<li>if (target &lt; arr[mid])  right = mid</li>
</ul>
<p><em>因为当前这个arr[mid]一定不是target，那么接下来要查找的左区间的范围也是左闭右开，right不在范围内，mid也不在，所以right可以直接赋值为mid</em></p>
<ul>
<li>if (target &gt; arr[mid])  left = mid + 1</li>
</ul>
<p><em>同理，和上面一样当前这个arr[mid]一定不是target。接下来查找右区间，又因为范围是左闭右开，left是可以取到数值的，所以left在mid的基础上加一</em></p>
<p><strong>代码</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 算法：二分查找 (左闭右开)  </span><br><span class="line">// 输入：数组arr，查询数值target  </span><br><span class="line">// 输出：返回数值target的下标，没有找到返回-1  </span><br><span class="line">func binarySearch2(arr []int, target int) int &#123;  </span><br><span class="line">   // 左右区间  </span><br><span class="line">   left := 0  </span><br><span class="line">   right := len(arr)  </span><br><span class="line">   // 循环查找  </span><br><span class="line">   for left &lt; right &#123;  </span><br><span class="line">      // 中间值 防止溢出  </span><br><span class="line">      mid := left + ((right - left) / 2)  </span><br><span class="line">      if target == arr[mid] &#123;  </span><br><span class="line">         //找到数值 返回索引  </span><br><span class="line">         return mid  </span><br><span class="line">      &#125; else if target &lt; arr[mid] &#123;  </span><br><span class="line">         // 数值在区间左边 修改右边界  </span><br><span class="line">         right = mid  </span><br><span class="line">      &#125; else &#123;  </span><br><span class="line">         // 数值在区间右边 修改左边界  </span><br><span class="line">         left = mid + 1  </span><br><span class="line">      &#125;  </span><br><span class="line">   &#125;  </span><br><span class="line">   //找不到数值 返回-1  </span><br><span class="line">   return -1  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><ul>
<li>时间复杂度：O(log n)</li>
<li>空间复杂度：O(1)</li>
</ul>
<p>在二分查找中，每次比较都将搜索空间减半，这导致了对数级别的时间复杂度。即使数据量增加，二分查找的时间增长速度也很慢，因此它是一种高效的查找算法。</p>
<h4 id="计算公式"><a href="#计算公式" class="headerlink" title="计算公式"></a>计算公式</h4><p>用T(n)表示比较n个元素的二分查找的时间复杂度，则有以下递归关系：<strong>T(n)=T(n/2)+1</strong></p>
<ul>
<li>T(n/2) 表示在一次比较之后，搜索空间被减半，问题规模变为原来的一半。</li>
</ul>
<p>对于二分查找，a = 1，b = 2，f(n) = 1。<br>根据主定理T(n)=aT(n/b​)+f(n)，时间复杂度的表达式是：<br>T(n)=T(n/2)+1<br><strong>T(n)=Θ(logn)</strong></p>
<p>时间复杂度：O(log n)。</p>
<h4 id="主定理（Master-Theorem）："><a href="#主定理（Master-Theorem）：" class="headerlink" title="主定理（Master Theorem）："></a>主定理（Master Theorem）：</h4><p><strong>T(n)=aT(n/b​)+f(n)</strong></p>
<ul>
<li>a是子问题的个数</li>
<li>b是问题规模缩小的倍数</li>
<li>f(n)是除了子问题递归调用之外的其他操作的代价。</li>
</ul>
<p><em>1. 对于标准的二分查找算法，每次都将问题规模减半，因此只有一个子问题，即 a=1。</em><br><em>2. 每次都将搜索空间缩小一半，所以b=2</em><br><em>3. 每一步的操作是一个比较，所以f(n)=1</em></p>
<h3 id="相关题目"><a href="#相关题目" class="headerlink" title="相关题目"></a>相关题目</h3><ul>
<li><a href="https://leetcode.cn/problems/search-insert-position/">35. 搜索插入位置 - 力扣（LeetCode）</a></li>
<li><a href="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/">34. 在排序数组中查找元素的第一个和最后一个位置 - 力扣（LeetCode）</a><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//35 </span><br><span class="line">func searchInsert(nums []int, target int) int &#123;</span><br><span class="line">    n := len(nums)</span><br><span class="line">    left, right := 0, n - 1</span><br><span class="line">    ans := n</span><br><span class="line">    for left &lt;= right &#123;</span><br><span class="line">        mid := (right - left) &gt;&gt; 1 + left</span><br><span class="line">        if target &lt;= nums[mid] &#123;</span><br><span class="line">            ans = mid</span><br><span class="line">            right = mid - 1</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            left = mid + 1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//34</span><br><span class="line">func searchRange(nums []int, target int) []int &#123;</span><br><span class="line"></span><br><span class="line">    // 左右区间</span><br><span class="line">    left := 0</span><br><span class="line">    right := len(nums) - 1</span><br><span class="line">    first , last := -1 , -1</span><br><span class="line">    // 寻找first</span><br><span class="line">    for left &lt;= right &#123;</span><br><span class="line">        // 中间值 防止溢出</span><br><span class="line">        mid := left + ((right - left) / 2)</span><br><span class="line">        if target == nums[mid] &#123;</span><br><span class="line">            //找到数值</span><br><span class="line">            first = mid</span><br><span class="line">            right = mid - 1; //重点</span><br><span class="line">        &#125; else if target &lt; nums[mid] &#123;</span><br><span class="line">            // 数值在区间左边 修改右边界</span><br><span class="line">            right = mid - 1</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // 数值在区间右边 修改左边界</span><br><span class="line">            left = mid + 1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  left = 0</span><br><span class="line">  right = len(nums) - 1</span><br><span class="line">    // 寻找last</span><br><span class="line">    for left &lt;= right &#123;</span><br><span class="line">        // 中间值 防止溢出</span><br><span class="line">        mid := left + ((right - left) / 2)</span><br><span class="line">        if target == nums[mid] &#123;</span><br><span class="line">            //找到数值</span><br><span class="line">            last = mid</span><br><span class="line">            left = mid + 1; //重点</span><br><span class="line">        &#125; else if target &lt; nums[mid] &#123;</span><br><span class="line">            // 数值在区间左边 修改右边界</span><br><span class="line">            right = mid - 1</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // 数值在区间右边 修改左边界</span><br><span class="line">            left = mid + 1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //找不到数值</span><br><span class="line">    return  []int&#123;first, last&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>二分查找</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>JWT身份认证</title>
    <url>/2023/09/24/jwt%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为最近在写个人博客的项目，在做项目时，涉及用户注册、登录、退出等操作，要对登陆用户的合法性进行判断，这就需要用到身份验证了。</p>
<h2 id="认证、授权、鉴权是什么？"><a href="#认证、授权、鉴权是什么？" class="headerlink" title="认证、授权、鉴权是什么？"></a>认证、授权、鉴权是什么？</h2><h3 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h3><p><code>认证(Identification)</code> 是指根据声明者所特有的识别信息，确认声明者的身份<br>白话文的意思就是：<code>你需要用身份证证明你自己是你自己</code>。</p>
<p>比如我们常见的认证技术：</p>
<ul>
<li>身份证</li>
<li>用户名和密码</li>
<li>用户手机：手机短信、手机二维码扫描、手势密码</li>
<li>用户的电子邮箱</li>
</ul>
<h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3><p><code>授权(Authorization)</code>： 在信息安全领域是指<code>资源所有者</code>委派<code>执行者</code>，赋予<code>执行者</code>指定范围的资源操作权限，以便对资源的相关操作。</p>
<p><strong>在现实生活领域例如：</strong> 银行卡（由银行派发）、门禁卡（由物业管理处派发）、钥匙（由房东派发），这些都是现实生活中授权的实现方式。</p>
<p><strong>在互联网领域例如：</strong> web 服务器的 session 机制、web 浏览器的 cookie 机制、颁发授权令牌（token）等都是一个授权的机制。</p>
<h3 id="鉴权"><a href="#鉴权" class="headerlink" title="鉴权"></a>鉴权</h3><p><code>鉴权(Authentication)</code> 在信息安全领域是指<strong>对于一个声明者所声明的身份权利，对其所声明的真实性进行鉴别确认的过程</strong>。</p>
<p><strong>在现实生活领域：</strong> 门禁卡需要通过门禁卡识别器，银行卡需要通过银行卡识别器；</p>
<p><strong>在互联网领域：</strong> 校验 session/cookie/token 的合法性和有效性</p>
<p><strong>先授权，后鉴权</strong></p>
<p> 也就是说，用户必须<strong>保持有效</strong>，然后才能根据其<strong>授权</strong>级别授予对资源的<strong>访问权限</strong>。一旦通过身份验证，就会为它们分配不同的角色，从而向它们授予对系统的特殊权限。</p>
<h2 id="需求例子"><a href="#需求例子" class="headerlink" title="需求例子"></a>需求例子</h2><p>我以一个实际需求的例子带大家认识一下这个身份验证的流程</p>
<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>XX公司有一栋大楼。这栋大楼只有员工可以进入，普通人进不去，每个员工都有一个自己的员工号。可以通过一楼的门卫，一旦门卫将人放进去后，不同的员工还可以进入不同的屋子里。例如：总经理可以进入所以屋子里，卑微打工人小锅只能进入他自己的屋子里，而不能进入总经理办公室。</p>
<p>我们可以总结出来<strong>实际的需求</strong>：</p>
<ul>
<li>判断是否为公司员工</li>
<li>不同员工 不同权限</li>
</ul>
<h3 id="存储-检验"><a href="#存储-检验" class="headerlink" title="存储 检验"></a>存储 检验</h3><p>毋庸置疑的一点，对于XX公司员工的这个集合，肯定是要进入存储层，因为公司管理人员可能对员工进行一系列增删改查。总经理想看看现在有多少员工，一楼门卫也需要判断来的那个人是不是公司员工。</p>
<p>我们想到可以使用关系型数据库创建一张表，叫做users，每个员工就是表中的一行，里面有他自己的员工id。我觉得大家应该都可以看出来这个设计有什么缺陷，员工id本身这个值相对来讲本身就是一个很容易公开出去的值，旁边的同事或者黑客很容易就窃取到。那我们怎么解决这个问题呢？很简单，既然半公开的id不行，那我们就再加一个密码。</p>
<p>员工不仅有自己的id还有自己的密码，而且员工本人要负责保护好自己的密码，不让别知道。当员工要进入大楼的时候，他不仅要提供自己的id还要提供密码。那门卫怎么知道这个传过来的密码是不是正确的密码呢？</p>
<blockquote>
<p>密码存储和校验 哈希算法？</p>
</blockquote>
<p>门卫仅在确认了数据库中，使用这个id跟这个密码哈希能够吻合出正确的员工时才能放行。<br><img src="/2023/09/24/jwt%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81/jwt1.png"></p>
<blockquote>
<p>使用http发送id、密码的时候，有坏人一直偷听。并且被他听到了，那他就可以直接拿着这个密码进入大楼。那我们怎么保证不被窃取？不被监听？不被穿该呢？<br>使用RSA 非对称加密算法+数字签名构成https，使用https就OK</p>
</blockquote>
<h3 id="授权-1"><a href="#授权-1" class="headerlink" title="授权"></a>授权</h3><p>现在我们进入这个大楼了，每个屋子必须也要额外确定我是谁？假设我升职了，现在是一个部门经理，我只想我自己可以进入507，其他人进不来。那这个门又应该怎么设计呢？我们可以像之前的大门门卫一样，也在507门口安排一个小门门卫。当我想要进入507的时候，我同样也要输入我的员工id和密码给他。他会去数据库中检索权限信息，判断是否正确。比如说这张表，我的权限是true，那我就可以进去。而其他人想要进去这个房间，门卫就去检索一下这个表，发现他们的507权限是false，那么他们就进不去。<br><img src="/2023/09/24/jwt%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81/jwt2.png"></p>
<h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h3><p>这个设对应的设计体系就是，用户一旦登入之后，他做的任何操作都要像他登录的那样，同样要提交他的用户id和密码。这样的设计是无状态的，好处是可以在任何时刻重启。但是也有巨大的问题，就是用户需要多次发送id、密码。</p>
<blockquote>
<p>这个问题可以在前端解决，直接用js或者存到cookie里，header里面都可以避免让用户重复输入</p>
</blockquote>
<blockquote>
<p>那cookie安全吗？</p>
</blockquote>
<p>我们知道 HTTP 是明文传输协议，因此如果使用 HTTP 传输 Cookie 信息，则存在以下几个问题：</p>
<ol>
<li>容易被窃听：HTTP 请求及其内容都是以明文形式传输的，因此第三方可以轻松地截取和查看请求内容，并获取其中包含的 Cookie 信息。</li>
<li>容易被篡改：由于 HTTP 没有提供任何防篡改措施，因此第三方可以修改请求内容或者插入恶意代码来窃取 Cookie 信息。<br>那我们的用户密码不是不安全吗，这时候我们可以使用我们前面提到的HTTPS来安全地传输敏感信息和 Cookie 数据。</li>
</ol>
<p>但是大家想一想，现在我要进入507办公室，我还得额外将我的用户密码告诉507门口的那个门卫，那么这个门卫就知道了我的用户id和密码。那如果我晚上把电脑放在507，第二天发现我的电脑丢了。那么这个电脑就可能是两个人偷的，一个是小门门卫，一个是大门门卫，我们就还得让警察来调查，问题就越来越复杂了。</p>
<h3 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h3><p>一般校验用户的机密，我们只让一个组件来完成，多个组件访问就可能出现企业出内鬼的问题，也就是说看守507房间的这个门卫，我不应该随随便便把我的密码告诉他。为了避免密码被反复的传来传去，我们会使用一个比密码更加安全的东西。就是token</p>
<blockquote>
<p>什么是token？Token是服务端生成的一串字符串，以作客户端进行请求的一个令牌，当第一次登录后，服务器生成一个Token便将此Token返回给客户端，以后客户端只需带上这个Token前来请求数据即可，无需再次带上用户名和密码。</p>
</blockquote>
<p>为什么说token比密码更加安全？</p>
<ul>
<li>密码是永久有效的</li>
<li>令牌有时间限制，往往只在20min-2hours有效</li>
</ul>
<p><img src="/2023/09/24/jwt%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81/jwt3.png"></p>
<p>当我想进入大门的时候，我会跟大门门卫交换我的用户名跟密码，一旦交换通过，门口的门卫就会发给我一张令牌，令牌上写着：我是蒸汽小锅，我可以进入507房间。<br>于是我带着这个纸，走到507房间，把我这张带字的纸给这个507门卫，507门卫看到这个纸以后就会放我进去。</p>
<h3 id="真实性-amp-有效期"><a href="#真实性-amp-有效期" class="headerlink" title="真实性&amp;有效期"></a>真实性&amp;有效期</h3><p>这个架构看起来没啥问题，但是又出现了一个新的问题，那就是我们怎么确定这个令牌的真实性&amp;有效期？</p>
<blockquote>
<p>可以存session(这里暂不涉及) / 数据库</p>
</blockquote>
<p>在数据库中额外加一张表，叫做tokens，里面存储所有还可以用的令牌，每个令牌除了一个数值外，还有一个可用时间。当我通过了大门门卫的校验之后，大门门卫会把这个令牌值写到数据库里，而我想要进507的时候，小门门卫又会去数据库中比对这张令牌，看看是否过期并检查它的真实性，如果是真实的就放我进去。</p>
<p>回想我们整个需求，现在真的只有xx公司员工可以进入这个大楼，因为黑客偷不到员工密码，而且不同员工也有不同权限，每个员工在访问他自己权限的时候都要携带他的令牌，令牌有有效期，令牌本身的有效期由数据库负责。只有大楼门卫可以<br>颁发令牌，其他小门门卫只能校验令牌，确定令牌合法才会放人进去，这样总经理就可以进入任何人屋子，而我只能进入507。</p>
<p>那现在还有什么问题呢？小门门卫虽然不能颁发令牌，但是他可以读取数据库，也就是说小门门卫可以轻松取出总经理的令牌，这还是一个非常危险的设计。<br>我们现在不得不在数据库中额外增加一张表，还需要定时的清理数据库中的过时数据，程序特别复杂，得弄好后台任务。如果碰到需要多个同时想进入自己的屋子里的请求，那几亿亿亿个小门门卫要短时间内校验几亿亿亿张令牌，要校验令牌又要查询数据库<br>数据库表示：你不要过来啊！！！！</p>
<blockquote>
<p>事实上，将令牌存在数据库本身就是一个不合理的设计<br>引入jwt</p>
</blockquote>
<h3 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h3><p>什么是jwt，在这里我们以一个例子为例，大家可能会更清楚。</p>
<p>古代皇帝经常派兵出去打仗，假如打到一半的时候，皇帝突然喊停让部队。怎么喊停呢？大家应该都看过电视剧吧，就是有个使者骑个马，然后八百里加急把圣旨给那个将军，让将军回来。<br>那么现在问题又来了，这个将军怎么知道来的这个使者是皇帝派来的，不是假冒的呢？古时候的解决办法是一个叫做虎符的东西，虎符一共有两面(A,B)，这个出去打仗的时候，将军拿走A面，皇帝拿着B面，只有成对的AB两面才可以吻合的扣在一起。皇帝派出使者的时候，会让使者拿着B面，使者将B面交给将军，将军把两个扣在一起，如果可以重合，就说明这是皇帝派来的，而不是伪造的。</p>
<p>回到我们最开始的需求例子，现在我们要进入大门，我们只需要将我们的id和密码告诉大门门卫确认了我的身份，这个门卫（皇上），他会给我一块B面虎符。我带着这个B面虎符来到507门口，把我的B面虎符给507门口的这个门卫（将军），他手中有一个A面的虎符，一扣发现扣上了，就放我进去。<br>整个过程中门口的门卫没有访问数据库，小门的门卫也没有访问数据库。这个事听起来蛮神奇的，咋回事呢？</p>
<p><img src="/2023/09/24/jwt%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81/jwt4.png"></p>
<p>我们从技术的角度来理解一下，首先我要发起一个http post请求，发给大门门卫，告诉他我要进入公司大楼，这一次请求中就携带了我的id跟密码。<br>大门门卫收到了我的用户名跟密码，去数据库中校验我的身份，一旦确认了我的身份之后，他要发给我的不在是一张令牌，而是一张虎符(数字签名)。<br>那么这个大门门卫要先生成这个虎符，那么这个虎符应该怎么生成呢？</p>
<h3 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h3><p><img src="/2023/09/24/jwt%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81/jwt5.png"><br>分为两个部分，第一个部分是完全明文的，比如<em>I’m Zqxg Go：507 Id：0001</em>，一般开发者喜欢用Json/base64编码,只有这一段明文还是不行的，因为黑客也可以生成出这一段明文，所以我们还要加入一段数字签名</p>
<blockquote>
<p>什么是数字签名？<br>_数字签名_（又称公钥数字签名）是只有信息的发送者才能产生的别人无法伪造的一段数字串，这段数字串同时也是对信息的发送者发送信息真实性的一个有效证明。<br><img src="/2023/09/24/jwt%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81/jwt6.png"></p>
</blockquote>
<p>简单来说就是大门门卫用自己的私钥加密上面的明文得到签名后的字符串。黑客无法访问到他的私钥，从而黑客得不到数字签名。</p>
<p>而当我拿着我虎符上楼的时候，每个小门门卫都知道大门门卫的公钥，他要确定的一点就是这张虎符一定是楼底大门门卫颁发的。怎么确定呢？他用大门门卫颁发的公钥去解密虎符后半部分的签名，</p>
<ul>
<li>如果解密的结果刚好等于签名明文的一部分，就证明这张虎符就是楼底大门门卫颁发的</li>
<li>如果解密发生错误/解密结果跟明文不符合 就说明这个令牌是伪造的</li>
</ul>
<h3 id="需求解决"><a href="#需求解决" class="headerlink" title="需求解决"></a>需求解决</h3><p>当小门门卫确定这个令牌是大门门卫颁发的之后，他才会去看里面的内容。数据中包含着我是否能进入这个小门，从而确定放我进去 or 不放我进去</p>
<blockquote>
<p>黑客无法伪造这样的虎符：他无法搞到大门门卫的私钥，只能用他自己的秘钥去进行数字签名，这样的数字签名小门门卫就会发现解不开 or 解开了但是跟前面明文不符合</p>
</blockquote>
<p>这整个过程中，大门门卫跟小门门卫都没有访问数据库<br>大门门卫知道自己的私钥，小门门卫知道大门门卫的公钥。并且小门门卫也发不出这钟虎符，企业里面就不会出现内鬼了！！！并且小门门卫无法控制总经理的虎符，使用数字签名可以完美的解决所有需求。</p>
<h3 id="JWT-1"><a href="#JWT-1" class="headerlink" title="JWT"></a>JWT</h3><p>JWT的token包含三部分数据：</p>
<ol>
<li>Header：头部，通常头部有两部分信息：</li>
</ol>
<ul>
<li>声明类型type，这里是JWT（type=jwt）</li>
<li>加密算法，自定义(rs256/base64/hs256) 我们会对头部进行base64加密（可解密），得到第一部分数据</li>
</ul>
<ol start="2">
<li>Payload：载荷，就是有效数据，一般包含下面信息：</li>
</ol>
<ul>
<li>用户身份信息-userid,username（注意，这里因为采用base64加密，可解密，因此不要存放敏感信息）</li>
<li>注册声明：如token的签发时间，过期时间，签发人等 这部分也会采用base64加密，得到第二部分数据</li>
</ul>
<p><em>（1）标准中注册的声明（建议但不强制使用）<br>    iss: jwt签发者<br>    sub: jwt所面向的用户<br>    aud: 接收jwt的一方<br>    exp: jwt的过期时间，这个过期时间必须要大于签发时间<br>    nbf: 定义在什么时间之前，该jwt都是不可用的.<br>    iat: jwt的签发时间<br>    jti: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。<br>（2）公共的声明<br>公共的声明可以添加任何的信息，一般添加用户的相关信息或其他业务需要的必要信息. 但不建议添加敏感信息，因为该部分在客户端可解密.<br>（3）私有的声明<br>私有声明是提供者和消费者所共同定义的声明，一般不建议存放敏感信息，因为base64 是对称解密的，意味着该部分信息可以归类为明文信息。</em>  </p>
<ol>
<li>Signature：base64加密，签名，是整个数据的认证信息。一般根据前两步的数据，再加上服务的的密钥（secret，盐）（不要泄漏，最好周期性更换），通过加密算法生成。用于验证整个数据完整和可靠性</li>
</ol>
<blockquote>
<p>一个JWT实际上就是一个字符串，它由三部分组成，头部、载荷与签名。</p>
</blockquote>
<h3 id="代码实现上面内容"><a href="#代码实现上面内容" class="headerlink" title="代码实现上面内容"></a>代码实现上面内容</h3><p>虎符颁发</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func Sign(payload interface&#123;&#125;) (ret string, err error) &#123;  </span><br><span class="line">   // 编码Header  </span><br><span class="line">   h := header&#123;  </span><br><span class="line">      Alg: alg, //HS256  </span><br><span class="line">      Typ: &quot;JWT&quot;,  </span><br><span class="line">   &#125;  </span><br><span class="line">   marshal, err := json.Marshal(h)  </span><br><span class="line">   if err != nil &#123;  </span><br><span class="line">      return &quot;&quot;, err  </span><br><span class="line">   &#125;  </span><br><span class="line">   bh := base64.RawURLEncoding.EncodeToString(marshal)  </span><br><span class="line">  </span><br><span class="line">   // 编码Payload  </span><br><span class="line">   marshal, err = json.Marshal(payload)  </span><br><span class="line">   if err != nil &#123;  </span><br><span class="line">      return &quot;&quot;, err  </span><br><span class="line">   &#125;  </span><br><span class="line">   bp := base64.RawURLEncoding.EncodeToString(marshal)  </span><br><span class="line">  </span><br><span class="line">   s := fmt.Sprintf(&quot;%s.%s&quot;, bh, bp)  </span><br><span class="line">  </span><br><span class="line">   // HS256 签名  </span><br><span class="line">   ret, err = hs256([]byte(Secret), []byte(s))  </span><br><span class="line">   if err != nil &#123;  </span><br><span class="line">      return &quot;&quot;, err  </span><br><span class="line">   &#125;  </span><br><span class="line">  </span><br><span class="line">   return fmt.Sprintf(&quot;%s.%s.%s&quot;, bh, bp, ret), nil  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>虎符校验</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func Verify(token string) (err error) &#123;  </span><br><span class="line">   //分割  </span><br><span class="line">   parts := strings.Split(token, &quot;.&quot;)  </span><br><span class="line">   if len(parts) != 3 &#123;  </span><br><span class="line">      return errors.New(&quot;parts len error&quot;)  </span><br><span class="line">   &#125;  </span><br><span class="line">   //获取前两部分数据 同样HS256加密  </span><br><span class="line">   data := strings.Join(parts[0:2], &quot;.&quot;)  </span><br><span class="line">   hasher := hmac.New(sha256.New, []byte(Secret))  </span><br><span class="line">   _, err = hasher.Write([]byte(data))  </span><br><span class="line">   if err != nil &#123;  </span><br><span class="line">      return err  </span><br><span class="line">   &#125;  </span><br><span class="line">  </span><br><span class="line">   //第三部分签名  </span><br><span class="line">   sig, err := base64.RawURLEncoding.DecodeString(parts[2])  </span><br><span class="line">   if err != nil &#123;  </span><br><span class="line">      return err  </span><br><span class="line">   &#125;  </span><br><span class="line">   //比较 相同成功  </span><br><span class="line">   if hmac.Equal(sig, hasher.Sum(nil)) &#123;  </span><br><span class="line">      return nil  </span><br><span class="line">   &#125;  </span><br><span class="line">   return errors.New(&quot;verify is invalid&quot;)  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这只是一个非常非常非常简单的代码实现JWT的签发和校验，我们可以用JWT的官网来比对一下我们的校验是否正确，可以看到是正确的，并且我们的程序也是返回verify OK！！！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sign is eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjEyMzQ1Njc4OTAiLCJuYW1lIjoiWlFYRyIsImFkbWluIjp0cnVlfQ.omdLq6Tg_cOR6oRsSzfjh0y7vT5xGRIJILfCU1xeVz0</span><br><span class="line">verify OK</span><br></pre></td></tr></table></figure>
<p><img src="/2023/09/24/jwt%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81/jwt7.png"></p>
<p>虽然这个JWT已经够用了，但是我们还是不满足。因为这个代码使用的是HS256消息签名算法</p>
<blockquote>
<p>HS256 使用同一个「secret_key」进行签名与验证（对称加密）。一旦 secret_key 泄漏，就毫无安全性可言了。</p>
</blockquote>
<p>我们还可以使用RS256消息签名算法：使用 RSA 私钥进行签名，使用 RSA 公钥进行验证。公钥即使泄漏也毫无影响，只要确保私钥安全就行。</p>
<p><em>注：对于单体应用而言，HS256 和 RS256 的安全性没有多大差别。</em></p>
<p>我们需要自觉维持好私钥，并将公钥对全世界公开。用户想要检验自己的虎符是否过期，他可以使用js在本地校验<br><strong>Open PublicKey + JS == JWT</strong></p>
<h3 id="JWT丢失-amp-撤回问题"><a href="#JWT丢失-amp-撤回问题" class="headerlink" title="JWT丢失&amp;撤回问题"></a>JWT丢失&amp;撤回问题</h3><p>这时候又有一个问题，如果虎符丢了，可能被黑客捡到了，那么黑客就会去找小门门卫进去507房间，因为虎符是合法的，所以小门门卫会放他进去。那我们怎么阻止黑客进入呢？</p>
<blockquote>
<p>解决虎符丢失问题，第一步就是别丢。不丢，虎符存哪里呢？</p>
</blockquote>
<ul>
<li>存LocalStorage （不可以）可能被窃取</li>
<li>存cookie （存jwt可以）<br>为什么可以呢，黑客无法读取你的cookie也不能改别电脑上的cookie。cookie是客户端概念，只要你的电脑没病毒，就没人能够读走你的cookie。<br>黑客注入JS可以吗？ 不可以，现在比较流行的浏览器都禁止使用JS来访问cookie了，cookie只会随着http的传递和存储。<br>所以怎么存JWT，一般网站都是存到cookie中。</li>
</ul>
<blockquote>
<p>又有一个问题，如果JWT发了出去怎么撤回呢？</p>
</blockquote>
<p>无法撤回！！！如果你颁发了一张JWT，无论如何都无法撤回，只能等到他时间到。不然就是你调整逻辑，使用共享存储Redis，来存储被撤回的JWT<br>我们用JWT可以完美解决<strong>用户登录跟注册、退出</strong>的问题，</p>
<p>又有一个问题了，我们的jwt作为访问资源的凭证，时间上肯定不能设置太长。但是如果我们设置的时间太短了，用户携带的频繁jwt过期，用户的体验感就会直线下降dowm。</p>
<blockquote>
<p>我们可以引入Refresh Token 用双Token设计来完善</p>
</blockquote>
<h3 id="双Token"><a href="#双Token" class="headerlink" title="双Token"></a>双Token</h3><p>双Token是什么？指的是Access Token(访问令牌) &amp;  Refresh Token (刷新令牌)</p>
<ul>
<li>我前面讲的 Token，都是 Access Token。</li>
<li>Refresh Token：作用是刷新AccessToken。认证服务器会提供一个刷新接口，我们传入Refresh_token，认证服务器通过后会返回一个新的AccessToken。<br>特点：</li>
</ul>
<ol>
<li>Refresh Token 的有效期会比较长，</li>
<li>当 Access Token 由于过期而失效时，使用 Refresh Token 就可以获取到新的 Access Token 如果 Refresh Token 也失效了，用户就只能重新登录了</li>
</ol>
<h3 id="双Token流程："><a href="#双Token流程：" class="headerlink" title="双Token流程："></a>双Token流程：</h3><ol>
<li>用户身份验证:当用户通过用户名和密码登录时，服务器会验证用户的身份。如果验证成功，服务器会生成访问令牌和刷新令牌，并将它们返回给客户端。</li>
<li>使用访问令牌:客户端收到令牌后，会将访问令牌存储在本地(一般存在SessionStorage, 而刷新令牌存在LocalStorage)。然后，客户端在每次向服务器发送请求时，都会在请求头中携带访问令牌。</li>
<li>访问令牌过期：当访问令牌过期后，服务器会拒绝来自客户端的请求,并返回一个特定的错误码，例如401(未授权)。</li>
<li>使用刷新令牌:当客户端收到401错误码时,它会使用刷新令牌向服务器请求新的访问令牌。服务器会验证刷新令牌，如果验证成功，服务器会生成新的访问令牌，并将它返回给客户端。</li>
<li>刷新令牌过期:如果刷新令牌也过期了，客户端就需要重新进行身份验证。</li>
</ol>
<p> ### JWT +Refresh Token<br><img src="/2023/09/24/jwt%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81/jwt8.png"><br>在 JWT 的实践中，引入 Refresh Token，将会话管理流程改进如下：</p>
<ol>
<li>客户端使用用户名密码进行认证</li>
<li>服务端生成有效时间较短的 Access Token（例如 10 分钟），和有效时间较长的 Refresh Token（例如 7 天）</li>
<li>客户端访问需要认证的接口时，携带 Access Token</li>
<li>如果 Access Token 没有过期，服务端鉴权后返回给客户端需要的数据</li>
<li>如果携带 Access Token 访问需要认证的接口时鉴权失败（例如返回 401 错误），则客户端使用 Refresh Token 向刷新接口申请新的 Access Token</li>
<li>如果 Refresh Token 没有过期，服务端向客户端下发新的 Access Token</li>
<li>客户端使用新的 Access Token 访问需要认证的接口</li>
</ol>
<p>上述的架构，提供了服务端禁用用户 Token 的方式，当用户需要登出或禁用用户时，只需要将服务端的 Refresh Token 禁用或删除，用户就会在 Access Token 过期后，由于无法获取到新的 Access Token 而再也无法访问需要认证的接口。这样的方式虽然会有一定的窗口期（取决于 Access Token 的失效时间），但是结合用户登出时客户端删除 Access Token 的操作，基本上可以适应常规情况下对用户认证鉴权的精度要求。</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>JWT 的使用，提高了开发者开发用户认证鉴权功能的效率，降低了系统架构复杂度，避免了大量的数据库和缓存查询，降低了业务接口的响应延迟。然而 JWT 的这些优点也增加了 Token 管理上的难度，通过引入 Refresh Token，既能继续使用 JWT 所带来的优势，又能使得 Token 管理的精度符合业务的需求。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://cloud.tencent.com/developer/article/2003411">六种Web身份验证方法比较和Flask示例代码-腾讯云开发者社区-腾讯云 (tencent.com)</a><br><a href="https://zhuanlan.zhihu.com/p/590149659">Web身份认证的常见方式 - 知乎 (zhihu.com)</a><br><a href="https://www.swvq.com/boutique/detail/52623">Tip7 - 来一次痛快的 HTTP :旅吧 - 学新通 (swvq.com)</a><br><a href="https://www.cnblogs.com/chenrong/articles/5818498.html">http authorization 基本认证 - szchenrong - 博客园 (cnblogs.com)</a><br><a href="https://juejin.cn/post/7129298214959710244#heading-3">一文教你搞定所有前端鉴权与后端鉴权方案，让你不再迷惘 - 掘金 (juejin.cn)</a><br><a href="https://zhuanlan.zhihu.com/p/632833667">双令牌 - 知乎 (zhihu.com)</a><br><a href="https://zhuanlan.zhihu.com/p/52300092/">基于 JWT + Refresh Token 的用户认证实践 - 知乎 (zhihu.com)</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>jwt</tag>
      </tags>
  </entry>
  <entry>
    <title>移除元素</title>
    <url>/2023/10/21/%E6%95%B0%E7%BB%84%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。<br>要求：</p>
<ul>
<li>不要使用额外的数组空间，必须仅使用 O(1) 额外空间并<strong>原地</strong>修改输入数组。</li>
<li>元素的顺序可以改变。不需要考虑数组中超出新长度后面的元素。<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3></li>
</ul>
<ol>
<li> 给定 nums = [3,2,2,3], val = 3, </li>
</ol>
<ul>
<li>函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。 </li>
<li>不需要考虑数组中超出新长度后面的元素。</li>
</ul>
<ol start="2">
<li> 给定 nums = [0,1,2,2,3,0,4,2], val = 2,</li>
</ol>
<ul>
<li>函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。<h3 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h3></li>
</ul>
<ol>
<li>双指针思想：<strong>通过一个快指针和慢指针在一个for循环下完成两个for循环的工作</strong></li>
<li>定义：</li>
</ol>
<ul>
<li>快指针：寻找新数组的元素 <em>新数组就是不含有目标元素的数组</em></li>
<li>慢指针：指向更新 新数组下标的位置 <em>最后返回慢指针下标</em></li>
</ul>
<p>以示例2为例子：<br> <img src="/2023/10/21/%E6%95%B0%E7%BB%84%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A01.jpg"></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ol>
<li>双指针<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 算法：移除元素 双指针 </span><br><span class="line">// 输入：数组 nums 和一个值 val</span><br><span class="line">// 输出：移除所有数值等于 val 的元素，返回移除后数组的新长度 </span><br><span class="line">func removeElement(nums []int, val int) int &#123;  </span><br><span class="line">   //使用双指针  </span><br><span class="line">   slowIndex := 0  </span><br><span class="line">   for fastIndex := 0; fastIndex &lt; len(nums); fastIndex++ &#123;  </span><br><span class="line">      if val != nums[fastIndex] &#123;  </span><br><span class="line">         nums[slowIndex] = nums[fastIndex]  </span><br><span class="line">         slowIndex++  </span><br><span class="line">      &#125;  </span><br><span class="line">   &#125;  </span><br><span class="line">   nums = nums[:slowIndex]  </span><br><span class="line">   return slowIndex  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>使用 nums = nums[:slowIndex]  创建一个新切片，并返回切片下标。</li>
<li>因为在go语言中对一个数组进行切片，并不会影响到原数组的内存存储空间，所以符合题目的<code>原地修改输入数组</code>要求</li>
</ul>
<ol start="2">
<li><strong>改良方法：使用双向指针</strong>，及一个指针从左扫描，另外一个指针从右边扫描。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//相向双指针法</span><br><span class="line">func removeElement(nums []int, val int) int &#123;</span><br><span class="line">    // 有点像二分查找的左闭右闭区间 所以下面是&lt;=</span><br><span class="line">	left := 0</span><br><span class="line">	right := len(nums) - 1</span><br><span class="line">	for left &lt;= right &#123;</span><br><span class="line">		// 不断寻找左侧的val和右侧的非val 找到时交换位置 目的是将val全覆盖掉</span><br><span class="line">		for left &lt;= right &amp;&amp; nums[left] != val &#123;</span><br><span class="line">			left++</span><br><span class="line">		&#125;</span><br><span class="line">		for left &lt;= right &amp;&amp; nums[right] == val &#123;</span><br><span class="line">			right--</span><br><span class="line">		&#125;</span><br><span class="line">		//各自找到后开始覆盖 覆盖后继续寻找</span><br><span class="line">		if left &lt; right &#123;</span><br><span class="line">			nums[left] = nums[right]</span><br><span class="line">			left++</span><br><span class="line">			right--</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(nums)</span><br><span class="line">	return left</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="相关题目"><a href="#相关题目" class="headerlink" title="相关题目"></a>相关题目</h3><ul>
<li><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array/">26. 删除有序数组中的重复项</a></li>
<li><a href="https://leetcode.cn/problems/move-zeroes/">283. 移动零</a></li>
<li><a href="https://leetcode.cn/problems/backspace-string-compare/">844. 比较含退格的字符串</a></li>
</ul>
<p>相关代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 算法：移除元素 双指针  </span><br><span class="line">// 输入：数组 nums 和一个值 val</span><br><span class="line">// 输出：移除所有数值等于 val 的元素，返回移除后数组的新长度  </span><br><span class="line">func removeElement(nums []int, val int) int &#123;  </span><br><span class="line">   //使用双指针  </span><br><span class="line">   slowIndex := 0  </span><br><span class="line">   for fastIndex := 0; fastIndex &lt; len(nums); fastIndex++ &#123;  </span><br><span class="line">      if val != nums[fastIndex] &#123;  </span><br><span class="line">         nums[slowIndex] = nums[fastIndex]  </span><br><span class="line">         slowIndex++  </span><br><span class="line">      &#125;  </span><br><span class="line">   &#125;  </span><br><span class="line">   nums = nums[:slowIndex]  </span><br><span class="line">   return slowIndex  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 算法：移动0元素  </span><br><span class="line">// 输入：数组 nums</span><br><span class="line">// 输出：数组 nums，将所有 0 移动到数组的末尾  </span><br><span class="line">func moveZeroes(nums []int) &#123;  </span><br><span class="line">   res := 0  </span><br><span class="line">   n := len(nums)  </span><br><span class="line">   for i := 0; i &lt; n; i++ &#123;  </span><br><span class="line">      //跳过0  </span><br><span class="line">      if nums[i] != 0 &#123;  </span><br><span class="line">         //覆盖重复的元素  </span><br><span class="line">         nums[res] = nums[i]  </span><br><span class="line">         res++  </span><br><span class="line">      &#125;  </span><br><span class="line">   &#125;  </span><br><span class="line">   // 将剩余位置的元素清零  </span><br><span class="line">   for i := res; i &lt; n; i++ &#123;  </span><br><span class="line">      nums[i] = 0  </span><br><span class="line">   &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 算法：比较含退格的字符串  </span><br><span class="line">// 输入：两个字符串s、t  </span><br><span class="line">// 输出：两者相等，返回 true ,反之false  </span><br><span class="line">func backspaceCompare(s string, t string) bool &#123;  </span><br><span class="line">   result1 := helper(s)  </span><br><span class="line">   result2 := helper(t)  </span><br><span class="line">   if result1 == result2 &#123;  </span><br><span class="line">      return true  </span><br><span class="line">   &#125; else &#123;  </span><br><span class="line">      return false  </span><br><span class="line">   &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">func helper(s string) string &#123;  </span><br><span class="line">   runes := []rune(s)  </span><br><span class="line">   // 双指针实现  </span><br><span class="line">   res := 0  </span><br><span class="line">   for i := 0; i &lt; len(runes); i++ &#123;  </span><br><span class="line">      if runes[i] != &#x27;#&#x27; &#123;  </span><br><span class="line">         runes[res] = runes[i]  </span><br><span class="line">         res++  </span><br><span class="line">      &#125; else &#123;  </span><br><span class="line">         if res &gt; 0 &#123;  </span><br><span class="line">            res--  </span><br><span class="line">         &#125;  </span><br><span class="line">      &#125;  </span><br><span class="line">   &#125;  </span><br><span class="line">   runes = runes[:res]  </span><br><span class="line">   result := string(runes)  </span><br><span class="line">   return result  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数组</tag>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>有序数组的平方</title>
    <url>/2023/10/21/%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9/</url>
    <content><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><ul>
<li>给一个按 <code>非递减顺序</code> 排序的整数数组 nums，</li>
<li>返回：每个数字的 <strong>平方</strong> 组成的新数组，</li>
<li>要求： 返回的数组按<code>非递减顺序</code> 排序</li>
</ul>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ol>
<li>示例1：</li>
</ol>
<ul>
<li>输入：nums = [-4,-1,0,3,10]</li>
<li>输出：[0,1,9,16,100]</li>
<li>解释：平方后，数组变为 [16,1,0,9,100]，排序后，数组变为 [0,1,9,16,100]</li>
</ul>
<ol start="2">
<li>示例2：</li>
</ol>
<ul>
<li>输入：nums = [-7,-3,2,3,11]</li>
<li>输出：[4,9,9,49,121]</li>
</ul>
<h3 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h3><p>本题还是一样，使用双指针。但是和前面移除元素章节不一样的是，这里使用的是<strong>双向指针。</strong></p>
<ol>
<li><p>为什么使用双指针呢？<br>因为我们可以发现，其实数组是有序的， 只不过负数平方之后可能成为最大数了。<br>那么数组平方的最大值就在数组的两端，不是最左边就是最右边，不可能是中间。</p>
</li>
<li><p>定义</p>
</li>
</ol>
<ul>
<li>左指针：从目标数组的最左边开始扫描，依次向右移动</li>
<li>右指针：从目标数组的最右边开始扫描，依次向左移动</li>
</ul>
<ol start="3">
<li>思想</li>
</ol>
<ul>
<li>比较左右指针对应元素平方大小</li>
<li>大的放入结果数组最后方，大的指针移动</li>
<li>接着回到第一步比较</li>
<li>结束条件：左&gt;右指针<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3></li>
<li>时间复杂度为O(n)<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 算法：有序数组的平方  </span><br><span class="line">// 输入：非递减顺序 排序的整数数组 nums</span><br><span class="line">// 输出：非递减顺序 排序的整数平法数组  </span><br><span class="line">func sortedSquares(nums []int) []int &#123;  </span><br><span class="line">   // 双指针  </span><br><span class="line">   left, right := 0, len(nums)-1  </span><br><span class="line">   i := len(nums) - 1  </span><br><span class="line">   // 结果数组  </span><br><span class="line">   res := make([]int, len(nums))  </span><br><span class="line">   for left &lt;= right &#123;  </span><br><span class="line">      ls, rs := nums[left]*nums[left], nums[right]*nums[right]  </span><br><span class="line">      if ls &lt;= rs &#123;  </span><br><span class="line">         res[i] = rs  </span><br><span class="line">         right--  </span><br><span class="line">      &#125; else &#123;  </span><br><span class="line">         res[i] = ls  </span><br><span class="line">         left++  </span><br><span class="line">      &#125;  </span><br><span class="line">      i--  </span><br><span class="line">   &#125;  </span><br><span class="line">   return res  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>在写的时候，因为没注意边界问题，导致报错。所以这里注意一下</p>
<ul>
<li>区间：左闭右闭</li>
<li>循环条件：left &lt;= right <em>因为是左闭右闭区间</em></li>
<li>结果数组大小 与 目标数组大小 一致</li>
<li>结果数组指针i，因为是闭区间，所以初始值len(nums) - 1  </li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数组</tag>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>池化技术</title>
    <url>/2023/08/14/%E6%B1%A0%E5%8C%96%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<h2 id="开头"><a href="#开头" class="headerlink" title="开头"></a>开头</h2><p>池化技术在后端开发中应用非常广泛</p>
<h2 id="情景引入"><a href="#情景引入" class="headerlink" title="情景引入"></a>情景引入</h2><h3 id="例子-为何要用池？"><a href="#例子-为何要用池？" class="headerlink" title="例子 - 为何要用池？"></a>例子 - 为何要用池？</h3><p>先举一个简单的使用篮球例子，我们有多种策略使用篮球，并且使用篮球之后会产生一定的代价，主观上认为我们倾向于将代价最小化。</p>
<ol>
<li>一次性使用策略</li>
</ol>
<ul>
<li>我们要使用篮球，那我们就要花钱购买篮球然后使用。当我们结束使用后，就直接将篮球丢弃。下一次再想使用的时候，需要重新花钱购买篮球使用。<br><img src="/2023/08/14/%E6%B1%A0%E5%8C%96%E6%8A%80%E6%9C%AF/%E6%B1%A0%E5%8C%96%E6%8A%80%E6%9C%AF1.png"></li>
</ul>
<ol start="2">
<li>重复使用策略</li>
</ol>
<ul>
<li><p>显然上一种策略太浪费资源了，每一次使用都要重新申请资源。</p>
</li>
<li><p>显然我们可以购买一个篮球，然后重复使用。<br>但是如果有人A一直霸占这个篮球，另一个人B就只能一直等待。那我们是不是可以想到，让B重新买一个篮球呢？显然是可以的，这相当于是新创建了一个资源。可是这样又有新的问题了，如果一群人都想打球怎么办，难道都要购买篮球吗？结束使用的篮球怎么办呢，是直接丢弃吗？还是回收利用呢？全部都回收利用吗？</p>
</li>
<li><p>这里提出了一个方法：就是先一次性购买多个篮球，供大家使用，当有人使用完了就回收，等待下一个人使用<br><img src="/2023/08/14/%E6%B1%A0%E5%8C%96%E6%8A%80%E6%9C%AF/%E6%B1%A0%E5%8C%96%E6%8A%80%E6%9C%AF2.png"></p>
</li>
</ul>
<p>这就是池化技术。</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>编程世界中的池是一组资源, 可以随时使用, 但不随时地创建和释放。资源池（resource pool）被认为是一种设计模式，这里的资源主要是指系统资源, 这些资源不专属于某个进程或内部资源。客户端向池请求资源, 并使用返回的资源进行指定的操作。当客户端使用完资源后, 会把资源放回池中而不是释放或丢弃掉。</p>
<h3 id="典型的使用情形："><a href="#典型的使用情形：" class="headerlink" title="典型的使用情形："></a>典型的使用情形：</h3><ul>
<li>当获取资源的成本较高的时候</li>
<li>当请求资源的频率很高且使用资源总数较低的时候</li>
<li>当面对性能问题，涉及到处理时间延迟的时候</li>
</ul>
<p>池中的资源主要有两类：</p>
<ul>
<li>需要系统调用（system call） 的系统资源</li>
<li>需要网络通信的远程资源, 如数据库连接、套接字连接、线程和内存分配等等。</li>
</ul>
<p>池中的资源一般不包括像字体库或图片等大的数据对象, 那些资源的存储一般是通过是数据缓存或数据库技术实现的。由于资源池的存在, 从池中获取资源所需的时间变成了可预知的，从而在一定程度上解决性能的问题。</p>
<p>根据资源的类型，资源池一般包括连接池、线程池和内存池。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><p>线程池其实是一种池化的技术的实现，池化技术的核心思想其实就是实现资源的一个复用，避免资源的重复创建和销毁带来的性能开销。在线程池中，线程池可以管理一堆线程，让线程执行完任务之后不会进行销毁，而是继续去处理其它线程已经提交的任务。</p>
<ul>
<li>corePoolSize：线程池中用来工作的核心的线程数量。</li>
<li>maximumPoolSize：最大线程数，线程池允许创建的最大线程数。</li>
<li>workQueue：任务队列，是一个<a href="https://www.zhihu.com/search?q=%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2468999501%7D">阻塞队列</a>，当线程数已达到核心线程数，会将任务存储在阻塞队列中。</li>
<li>handler：<a href="https://www.zhihu.com/search?q=%E6%8B%92%E7%BB%9D%E7%AD%96%E7%95%A5&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2468999501%7D">拒绝策略</a>；当队列已满并且线程数量达到最大线程数量时，会调用该方法处理该任务。</li>
</ul>
<p>线程池的构造其实很简单，就是传入一堆参数，然后进行简单的赋值操作。</p>
<p>使用线程池的好处</p>
<ul>
<li>降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</li>
<li>提高响应速度。当任务到达时，任务可以不需要的等到线程创建就能立即执行。</li>
<li>提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统 的稳定性，使用线程池可以进行统一的分配，调优和监控。<h3 id="线程池运行"><a href="#线程池运行" class="headerlink" title="线程池运行"></a>线程池运行</h3></li>
</ul>
<ol>
<li>图一：刚创建<br>刚创建出来的线程池中只有一个构造时传入的阻塞队列而已，此时里面并没有的任何线程，但是如果你想要在执行之前已经创建好核心线程数，可以调用prestartAllCoreThreads方法来实现，默认是没有线程的。</li>
</ol>
<p><img src="/2023/08/14/%E6%B1%A0%E5%8C%96%E6%8A%80%E6%9C%AF/%E6%B1%A0%E5%8C%96%E6%8A%80%E6%9C%AF3.png"></p>
<ol start="2">
<li>提交任务<blockquote>
<p>当有线程通过execute方法提交了一个任务，会发生什么呢？</p>
</blockquote>
</li>
</ol>
<p>提交任务的时候，其实会去进行任务的处理</p>
<p>首先会去判断当前线程池的线程数是否小于核心线程数，也就是线程池构造时传入的参数corePoolSize。</p>
<p>如果小于，那么就直接通过ThreadFactory创建一个线程来执行这个任务，如图</p>
<p>接下来如果又提交了一个任务，也会按照上述的步骤，去判断是否小于核心线程数，如果小于，还是会创建线程来执行任务，执行完之后也会从阻塞队列中获取任务。<strong>这里有个细节，就是提交任务的时候，就算有线程池里的线程从阻塞队列中获取不到任务，如果线程池里的线程数还是小于核心线程数，那么依然会继续创建线程，而不是复用已有的线程。</strong><br><img src="/2023/08/14/%E6%B1%A0%E5%8C%96%E6%8A%80%E6%9C%AF/%E6%B1%A0%E5%8C%96%E6%8A%80%E6%9C%AF4.png"></p>
<ol start="3">
<li>优点：<br>优点1：复用线程，降低资源消耗。<blockquote>
<p>线程在创建时要开辟虚拟机栈、本地方法栈、程序计数器等私有线程的内存空间，而销毁时又要回收这些私有空间资源，而线程池创建了线程之后就会放在线程池中，因此线程池相比于线程来说，第一个优点就是<strong>可以复用线程、减低系统资源的消耗</strong></p>
</blockquote>
</li>
</ol>
<p>优点2：提高响应速度</p>
<blockquote>
<p>线程池是复用已有线程来执行任务的，而线程是在有任务时才新建的，所以相比于线程来说，线程池能够更快的响应任务和执行任务。</p>
</blockquote>
<p>优点3：管控线程数和任务数</p>
<blockquote>
<ol>
<li>控制最大并发数：线程池可以创建固定的线程数，从而避免了无限创建线程的问题。当线程创建过多时，会导致系统执行变慢，因为 CPU 核数是一定的、能同时处理的任务数也是一定的，而线程过多时就会造成线程恶意争抢和线程频繁切换的问题，从而导致程序执行变慢，所以合适的线程数才是高性能运行的关键。</li>
<li>控制任务最大数：如果任务无限多，而内存又不足的情况下，就会导致程序执行报错，而线程池可以控制最大任务数，当任务超过一定数量之后，就会采用拒绝策略来处理多出的任务，从而保证了系统可以健康的运行。</li>
</ol>
</blockquote>
<p> 优点4： 更多增强功能<br>  线程池相比于线程来说提供了更多的功能，比如定时执行和周期执行等功能。<br>4. 线程池缺点  </p>
<ul>
<li>创建太多线程，将会浪费一定的资源，有些线程未被充分使用。  </li>
<li>销毁太多线程，将导致之后浪费时间再次创建它们。  </li>
<li>创建线程太慢，将会导致长时间的等待，性能变差。  </li>
<li>销毁线程太慢，导致其它线程资源饥饿。</li>
</ul>
<h4 id="线程池与多线程的区别"><a href="#线程池与多线程的区别" class="headerlink" title="线程池与多线程的区别"></a>线程池与多线程的区别</h4><p>线程池是在程序运行开始，创建好的n个线程，并且这n个线程挂起等待任务的到来。而多线程是在任务到来得时候进行创建，然后执行任务。<br>线程池中的线程执行完之后不会回收线程，会继续将线程放在等待队列中；多线程程序在每次任务完成之后会回收该线程。<br>由于线程池中线程是创建好的，所以在效率上相对于多线程会高很多。<br>线程池也在高并发的情况下有着较好的性能；不容易挂掉。多线程在创建线程数较多的情况下，很容易挂掉。</p>
<h3 id="内存池"><a href="#内存池" class="headerlink" title="内存池"></a>内存池</h3><p>如何更好地管理应用程序内存的使用，同时提高内存使用的频率，这是值得每一个开发人员深思的问题。内存池（Memory Pool）就提供了一个比较可行的解决方案。 内存池在创建的过程中，会预先分配足够大的内存，形成一个初步的内存池。然后每次用户请求内存的时候，就会返回内存池中的一块空闲的内存，并将这块内存的标志置为已使用。当内存使用完毕释放内存的时候，也不是真正地调用 free 或 delete 的过程，而是把内存放回内存池的过程，且放回的过程要把标志置为空闲。最后，应用程序结束就会将内存池销毁，将内存池中的每一块内存释放。 </p>
<p><strong>内存池的优点</strong>：</p>
<ul>
<li>减少内存碎片的产生，这个优点可以从创建内存池的过程中看出，当我们在创建内存池的时候，分配的都是一块块比较规整的内存块，减少内存碎片的产生。</li>
<li>提高了内存的使用频率。这个可以从分配内存和释放内存的过程中看出。每次的分配和释放并不是去调用系统提供的函数或操作符去操作实际的内存，而是在复用内存池中的内存。</li>
</ul>
<p><strong>内存池的缺点</strong>： 会造成内存的浪费，因为要使用内存池需要在一开始分配一大块闲置的内存，而这些内存不一定全部被用到。</p>
<h3 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h3><p>数据库连接池的基本思想是在系统初始化的时候将数据库连接作为<a href="https://cloud.tencent.com/product/cos?from=20065&from_column=20065">对象存储</a>在内存中，当用户需要访问数据库的时候，并非建立一个新的连接，而是从连接池中取出一个已建立的空闲连接对象。在使用完毕后，用户也不是将连接关闭，而是将连接放回到连接池中，以供下一个请求访问使用，而这些连接的建立、断开都是由连接池自身来管理的。 同时，还可以设置连接池的参数来控制连接池中的初始连接数、连接的上下限数和每个连接的最大使用次数、最大空闲时间等。当然，也可以通过连接池自身的管理机制来监视连接的数量、使用情况等。</p>
<h2 id="协程池"><a href="#协程池" class="headerlink" title="协程池"></a>协程池</h2><h3 id="协程池定义"><a href="#协程池定义" class="headerlink" title="协程池定义"></a>协程池定义</h3><p>不同的业务都开启不同的goroutine来执行，无休止地创建大量 goroutine，势必会因为对大量 go 程的创建、调度和销毁带来性能损耗。<br>因为从cpu微观层面上来讲，是串行的一个指令一个指令去执行的，只是执行的非常快而已，如果指令来的太多，cpu的切换也会变多，在切换的过程中就需要消耗性能，所以协程池的主要作用就是管理goroutine，限定goroutine的个数。</p>
<h3 id="简单协程池实现"><a href="#简单协程池实现" class="headerlink" title="简单协程池实现"></a>简单协程池实现</h3><ul>
<li>首先不同的任务，请求过来，直接往entryChannel中写入，entryChannel再和jobsChannel建立通信</li>
<li>然后我们固定开启五个协程(不一定是五个，只是用五个举例子)，固定的从jobsChannel中读取数据，来进行任务处理。</li>
<li>其实本质上，channel就是一道桥梁，做一个中转的作用，之所以要设计一个jobsChannel和entryChannel，是为了解耦，entryChannel可以完全用做入口，jobsChannel后面可以做更深入的比如任务优先级，或者加锁，解锁等处理</li>
</ul>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>池是一种资源共享和复用的技术，把管理的理念引入到编程世界中。从基础的内存池，到线程池，再到各种连接池，根据应用场景还可以继续细分，如句柄池，缓存池…..几乎涵盖了互联网应用的大部分角落。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li><a href="https://juejin.cn/post/7028780454257885214">Golang:实现协程池 - 掘金 (juejin.cn)</a></li>
<li><a href="https://juejin.cn/post/7227012644508041274">go思想下的池化并发技术-协程池实现 - 掘金 (juejin.cn)</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1997315">1.池化技术-腾讯云开发者社区-腾讯云 (tencent.com)</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/538360410">池化技术基础和原理（LinuxC/C++） - 知乎 (zhihu.com)</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/32204303">池化技术的理解（线程池，对象池，数据库连接池） - 知乎 (zhihu.com)</a></li>
<li><a href="https://www.cnblogs.com/Brickert/p/14239110.html">多线程和线程池 - Brickert - 博客园 (cnblogs.com)</a></li>
<li><a href="https://blog.csdn.net/wireless_com/article/details/79072305">(27条消息) 从内存池到连接池 老码农眼中的资源池_扩展技术使用的资源池与什么和什么进行交互_半吊子全栈工匠的博客-CSDN博客</a></li>
<li><a href="https://www.zhihu.com/question/485071288">https://www.zhihu.com/question/485071288</a></li>
<li><a href="https://github.com/linzhepeng/gowp">GitHub - linzhepeng/gowp: 高性能go协程池，代码清晰易懂</a></li>
<li><a href="https://juejin.cn/post/6844903621969215495#heading-14https://github.com/linzhepeng/gowp">https://juejin.cn/post/6844903621969215495#heading-14https://github.com/linzhepeng/gowp</a></li>
</ol>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>池化技术</tag>
      </tags>
  </entry>
  <entry>
    <title>测试1</title>
    <url>/2022/01/26/%E6%B5%8B%E8%AF%951/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>长度最小的子数组</title>
    <url>/2023/10/24/%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><ul>
<li>给定一个含有 n 个正整数的数组和一个正整数 s </li>
<li>找出该数组中满足其<code>和 ≥ s</code> 的<code>长度最小</code>的 <code>连续</code> 子数组，并返回其长度。</li>
<li>如果不存在符合条件的子数组，返回 0。</li>
</ul>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ol>
<li>示例：</li>
</ol>
<ul>
<li>输入：s = 7, nums = [2,3,1,2,4,3]</li>
<li>输出：2</li>
<li>解释：子数组 [4,3] 是该条件下的长度最小的子数组。</li>
</ul>
<p>提示：</p>
<ul>
<li>1 &lt;= target &lt;= 10^9</li>
<li>1 &lt;= nums.length &lt;= 10^5</li>
<li>1 &lt;= nums[i] &lt;= 10^5</li>
</ul>
<h3 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h3><ol>
<li>滑动窗口：<strong>不断的调节子序列的起始位置和终止位置，从而得出我们要想的结果</strong></li>
</ol>
<p><em>滑动窗口也可以理解为双指针法的一种，本质上还是使用两个类指针来表示起始位置</em></p>
<ol start="2">
<li>滑动窗口常用来解决字符串的匹配问题。  </li>
</ol>
<ul>
<li>匹配问题套路：不满足题意，右移窗口，更新数据；满足题意，左移窗口，更新数据。  </li>
</ul>
<ol start="3">
<li>实现滑动窗口，主要确定如下四点：<br>（1）初始化窗口:<br>初始化左右边界 left = right = 0，把索引闭区间 [left, right] 称为一个「窗口」。<br>（2）寻找可行解：<br>我们先不断地增加 right 指针扩大窗口 [left, right]，直到窗口中的满足可行解。<br>（3）优化可行解：<br>此时，我们停止增加 right，转而不断增加 left 指针缩小窗口 [left, right]，直到窗口中的可行解不再符合要求。同时，每次增加 left，我们都要更新一轮结果。<br>（4）滑动窗口，直至一次遍历结束：<br>重复第 2 和第 3 步，直到 right 到达到的尽头。</li>
</ol>
<p><strong>基本模板</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public void slideWindowTemplate(String nums)&#123;</span><br><span class="line">    int l = 0, r = 0;        //[初始化窗口]</span><br><span class="line">    //codes...               [其他初始化信息,定义一些维护数据的数据结构]</span><br><span class="line">    while(r &lt; nums.length)&#123; //右边框移动</span><br><span class="line">        r++;                 //[增大窗口]</span><br><span class="line">        //codes.....         [更新窗口中的数据] </span><br><span class="line">        while(l &lt; r &amp;&amp; check(xxx) == false)&#123;   //[窗口不满足某种性质]</span><br><span class="line">              l++;             //[缩小窗口]</span><br><span class="line">            //codes...       [维护窗口中的数据]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 算法：长度最小的子数组  </span><br><span class="line">// 输入：含有n个正整数的数组和一个正整数s  </span><br><span class="line">// 输出：找出该数组中满足其和 ≥ s 的长度最小的 连续 子数组，并返回其长度。没有返回0  </span><br><span class="line">func minSubArrayLen(target int, nums []int) int &#123;  </span><br><span class="line">   // 返回结果数组长度 记录数组和 子数组长度  </span><br><span class="line">   res, sum := len(nums)+1, 0  </span><br><span class="line">   // 滑动窗口 双指针  </span><br><span class="line">   left, right := 0, 0  </span><br><span class="line">   // 右边框移动  </span><br><span class="line">   for ; right &lt; len(nums); right++ &#123;  </span><br><span class="line">      // 更新窗口中的数据  </span><br><span class="line">      sum += nums[right]  </span><br><span class="line">      // 窗口内的和大于等于target 移动左边框  </span><br><span class="line">      for ; sum &gt;= target; left++ &#123;  </span><br><span class="line">         // 更新子数组长度  </span><br><span class="line">         subLength := right - left + 1  </span><br><span class="line">         if subLength &lt; res &#123;  </span><br><span class="line">            res = subLength  </span><br><span class="line">         &#125;  </span><br><span class="line">         // 移除窗口中的数据  </span><br><span class="line">         sum -= nums[left]  </span><br><span class="line">      &#125;  </span><br><span class="line">   &#125;  </span><br><span class="line">   if res &gt; len(nums) &#123;  </span><br><span class="line">      return 0  </span><br><span class="line">   &#125; else &#123;  </span><br><span class="line">      return res  </span><br><span class="line">   &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="相关题目"><a href="#相关题目" class="headerlink" title="相关题目"></a>相关题目</h3><ul>
<li><a href="https://leetcode.cn/problems/fruit-into-baskets/">904.水果成篮</a></li>
<li><a href="https://leetcode.cn/problems/minimum-window-substring/">76. 最小覆盖子串</a></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 算法：最长连续两个元素子数组  </span><br><span class="line">// 输入：含有n个正整数的数组  </span><br><span class="line">// 输出：含有最大连续两个元素的子数组长度  </span><br><span class="line">func totalFruit(fruits []int) (ans int) &#123;  </span><br><span class="line">   cnt := map[int]int&#123;&#125;  </span><br><span class="line">   left := 0  </span><br><span class="line">   for right, x := range fruits &#123;  </span><br><span class="line">      cnt[x]++  </span><br><span class="line">      // 第三个元素 移动窗口  </span><br><span class="line">      for len(cnt) &gt; 2 &#123;  </span><br><span class="line">         y := fruits[left]  </span><br><span class="line">         cnt[y]--  </span><br><span class="line">         if cnt[y] == 0 &#123;  </span><br><span class="line">            delete(cnt, y)  </span><br><span class="line">         &#125;  </span><br><span class="line">         left++  </span><br><span class="line">      &#125;  </span><br><span class="line">      ans = max(ans, right-left+1)  </span><br><span class="line">   &#125;  </span><br><span class="line">   return  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">func max(a, b int) int &#123;  </span><br><span class="line">   if b &gt; a &#123;  </span><br><span class="line">      return b  </span><br><span class="line">   &#125;  </span><br><span class="line">   return a  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>在前面的基础上引入了一个字典，动态的判断是否出现第三个元素</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 算法：最小覆盖子串  </span><br><span class="line">// 输入：一个字符串 s 、一个字符串 t</span><br><span class="line">// 输出：返回 s 中涵盖 t 所有字符的最小子串 。不存在返回 &quot;&quot;func minWindow(s string, t string) string &#123;  </span><br><span class="line">   var res string  </span><br><span class="line">   // 初始化字典  </span><br><span class="line">   cnt := map[byte]int&#123;&#125;  </span><br><span class="line">   for _, value := range t &#123;  </span><br><span class="line">      cnt[byte(value)]++  </span><br><span class="line">   &#125;  </span><br><span class="line">   // 记录长度  </span><br><span class="line">   min := len(s) + 1  </span><br><span class="line">   left, right := 0, 0  </span><br><span class="line">   for ; right &lt; len(s); right++ &#123;  </span><br><span class="line">      // 发现有t数组元素就-1  </span><br><span class="line">      cnt[s[right]]--  </span><br><span class="line">      // 窗口改变条件 cnt内的数值都&lt;=0  </span><br><span class="line">      for check(cnt) &#123;  </span><br><span class="line">         if right-left+1 &lt; min &#123;  </span><br><span class="line">            min = right - left + 1  </span><br><span class="line">            // 记录最小的字符串  </span><br><span class="line">            res = s[left : right+1]  </span><br><span class="line">         &#125;  </span><br><span class="line">         // 左指针移动 碰到的元素+1  </span><br><span class="line">         cnt[s[left]]++  </span><br><span class="line">         left++  </span><br><span class="line">      &#125;  </span><br><span class="line">   &#125;  </span><br><span class="line">   return res  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">func check(m map[byte]int) bool &#123;  </span><br><span class="line">   for _, x := range m &#123;  </span><br><span class="line">      // 如果有0的就返回 false      </span><br><span class="line">      if x &gt; 0 &#123;  </span><br><span class="line">         return false  </span><br><span class="line">      &#125;  </span><br><span class="line">   &#125;  </span><br><span class="line">   return true  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数组</tag>
        <tag>滑动窗口</tag>
      </tags>
  </entry>
  <entry>
    <title>测试2</title>
    <url>/2022/01/26/%E6%B5%8B%E8%AF%952/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>测试3</title>
    <url>/2022/01/26/%E6%B5%8B%E8%AF%953/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/12/06/%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>面试题（持续更新）</title>
    <url>/2023/12/20/%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<p><strong>1. golang 中 make 和 new 的区别？</strong>（基本必问）</p>
<ul>
<li>共同点：给变量分配内存</li>
<li>区别：<ul>
<li>作用变量类型不同：new给string,int和数组（值类型）分配内存，make给切片，map，channel（引用类型）分配内存；</li>
<li>返回类型不一样：new返回指向变量的指针，make返回变量本身；</li>
<li>new 分配的空间被清零。make 分配空间后，会进行初始化；</li>
</ul>
</li>
</ul>
<ol start="2">
<li><p>for range 的时候它的地址会发生变化么？<br>不会，在 for a,b := range c 遍历中， a 和 b 在内存中只会存在一份，即之后每次循环时遍历到的数据都是以值覆盖的方式赋给 a 和 b，a，b 的内存地址始终不变。由于有这个特性，for 循环里面如果开协程，不要直接把 a 或者 b 的地址传给协程。解决办法：在每次循环时，创建一个临时变量。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for key, value := range oldMap &#123;</span><br><span class="line">    newMap[key] = value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>defer<br>作用：defer延迟函数，释放资源，收尾工作；如释放锁，关闭文件，关闭链接；捕获panic;<br>避坑指南：defer函数紧跟在资源打开后面，否则defer可能得不到执行，导致内存泄露。<br>多个 defer 调用顺序是 LIFO（后入先出），defer后的操作可以理解为压入栈中<br>所以defer的执行时机应该是return之后，且返回值返回给调用方之前。</p>
</li>
</ol>
<ul>
<li><p>先return，再defer</p>
</li>
<li><p>遇到panic时，遍历本协程的defer链表，并执行defer。在执行defer过程中:遇到recover则停止panic，返回recover处继续往下执行。如果没有遇到recover，遍历完本协程的defer链表后，向stderr抛出panic信息</p>
</li>
</ul>
<p> <strong>defer 最大的功能是 panic 后依然有效</strong><br>所以defer可以保证你的一些资源一定会被关闭，从而避免一些异常出现的问题。</p>
<ol start="4">
<li> <strong>golang 中解析 tag 是怎么实现的？反射原理是什么？</strong></li>
</ol>
<ul>
<li>tag可以理解为是struct的注解，可以用来定义字段的一个或多个属性。</li>
<li>原理是反射机制。Go语言的反射机制（Reflection）是指在运行时<strong>动态</strong>地检查类型的能力，以及<strong>动态调用</strong>类型的方法、获取和修改类型的字段值等操作。</li>
<li>在实践中，tag经常被用于序列化和反序列化（如 JSON、XML），数据验证，数据库 ORM 映射等场景。</li>
</ul>
<p><a href="https://learnku.com/articles/78000">Go Tag 标签 详解 | Go 技术论坛 (learnku.com)</a></p>
<ol start="5">
<li>调用函数传入结构体时，应该传值还是指针？ （<strong>Golang 都是传值</strong>）<br>Go 的函数参数传递都是值传递。</li>
</ol>
<ul>
<li>所谓值传递：指在调用函数时将实际参数复制一份传递到函数中，这样在函数中如果对参数进行修改，将不会影响到实际参数。</li>
<li>引用传递，所谓引用传递是指在调用函数时将实际参数的地址传递到函数中，那么在函数中对参数所进行的修改，将影响到实际参数</li>
</ul>
<p>因为 Go 里面的 map，slice，chan 是引用类型。变量区分值类型和引用类型。</p>
<ul>
<li>所谓值类型：变量和变量的值存在同一个位置。</li>
<li>所谓引用类型：变量和变量的值是不同的位置，变量的值存储的是对值的引用。</li>
<li>但并不是 map，slice，chan 的所有的变量在函数内都能被修改，不同数据类型的底层存储结构和实现可能不太一样，情况也就不一样。</li>
</ul>
<ol start="6">
<li><strong>讲讲 Go 的 select 底层数据结构和一些特性？</strong></li>
</ol>
<ul>
<li>select 结构组成主要是由 case 语句和执行的函数组成</li>
<li>select 实现的多路复用是：每个线程或者进程都先到注册和接受的 channel（装置）注册，然后阻塞，然后只有一个线程在运输，当注册的线程和进程准备好数据后，装置会根据注册的信息得到相应的数据。</li>
</ul>
<p><strong>select 的特性</strong><br>1）select 操作至少要有一个 case 语句，出现读写 nil 的 channel 该分支会忽略，在 nil 的 channel 上操作则会报错。<br>2）select 仅支持管道，而且是单协程操作。<br>3）每个 case 语句仅能处理一个管道，要么读要么写。<br>4）多个 case 语句的执行顺序是随机的。<br>5）存在 default 语句，select 将不会阻塞，但是存在 default 会影响性能。</p>
<ol start="7">
<li>go出现panic的场景</li>
</ol>
<ul>
<li>数组/切片越界</li>
<li>空指针调用</li>
<li>过早关闭http相应</li>
<li>除以0</li>
<li>向关闭的channel发消息</li>
<li>重复关闭channel</li>
<li>未初始化map</li>
</ul>
<ol start="8">
<li><p>go是否支持while循环，如何实现这种机制<br>不支持，使用for循环和break来替代</p>
</li>
<li><p><strong>数组和切片的区别 （基本必问）</strong></p>
</li>
</ol>
<p><strong>相同点：</strong></p>
<ul>
<li>只能存储一组相同类型的数据结构</li>
<li>都是通过下标来访问，并且有容量长度，长度通过 len 获取，容量通过 cap 获取</li>
</ul>
<p><strong>区别：</strong></p>
<ul>
<li>数组是定长，访问和复制不能超过数组定义的长度，否则就会下标越界，切片长度和容量可以自动扩容</li>
<li>数组是值类型，切片是引用类型，每个切片都引用了一个底层数组，切片本身不能存储任何数据，都是这底层数组存储数据，所以修改切片的时候修改的是底层数组中的数据。切片一旦扩容，指向一个新的底层数组，内存地址也就随之改变</li>
</ul>
<h2 id="map相关"><a href="#map相关" class="headerlink" title="map相关"></a><strong>map相关</strong></h2><ol>
<li>map 中删除一个 key，它的内存会释放么？（常问）</li>
</ol>
<ul>
<li>map的底层是有一个hash表的，这个hash表本身就占用内存。</li>
<li>如果这个key对应的value是一个值类型，那么内存不会释放。</li>
<li>如果这个key对应的value是一个引用类型，那么会释放这个元素对内存空间的占用。</li>
</ul>
<ol start="2">
<li> map 使用注意的点，是否并发安全？</li>
</ol>
<ul>
<li><strong>一定要先初始化，否则panic</strong></li>
<li>map类型是容易发生并发访问问题的。</li>
</ul>
<ol start="3">
<li>怎么处理对 map 进行并发访问？有没有其他方案？ 区别是什么？</li>
</ol>
<ul>
<li><strong>方式一、使用内置sync.Map，详细参考</strong> <a href="https://cloud.tencent.com/developer/article/1895565">Go - 使用 sync.Map 来解决 map 的并发操作问题-腾讯云开发者社区-腾讯云 (tencent.com)</a></li>
<li><strong>方式二、使用读写锁实现并发安全map</strong><a href="https://link.zhihu.com/?target=https://mbd.baidu.com/ma/s/qO7b0VQU">https://mbd.baidu.com/ma/s/qO7b0VQUmbd.baidu.com/ma/s/qO7b0VQU</a><a href="https://cloud.tencent.com/developer/article/1539049">https://cloud.tencent.com/developer/article/1539049</a></li>
</ul>
<ol start="4">
<li><strong>nil map 未初始化，空map是长度为空</strong></li>
</ol>
<ul>
<li>map声明后初始化前，此时为<code>nil map</code></li>
<li>map声明后不能进行赋值，只有初始化后才能进行赋值操作，初始化后为<code>empty map</code></li>
</ul>
<ol start="5">
<li>map 的数据结构是什么？</li>
</ol>
<ul>
<li>go map的本质也是使用hash table + 链表的方式实现。</li>
<li>map的基本数据结构用的是hmap + 桶实现</li>
</ul>
<ol start="6">
<li>map的扩容机制<br><a href="https://blog.csdn.net/weixin_45743893/article/details/122927041#:~:text=map%E7%9A%84%E5%BA%95%E5%B1%82%E7%BB%93%E6%9E%84%201%20buckets%20buckets%E6%98%AF%E4%B8%80%E4%B8%AA%E6%8C%87%E9%92%88%EF%BC%8C%E6%8C%87%E5%90%91%E4%B8%80%E4%B8%AAbmap%E6%95%B0%E7%BB%84%EF%BC%8C%E5%AD%98%E5%82%A8%E5%A4%9A%E4%B8%AA%E6%A1%B6%E3%80%82%202%20oldbuckets%20oldbuckets%E6%98%AF%E4%B8%80%E4%B8%AA%E6%8C%87%E9%92%88%EF%BC%8C%E6%8C%87%E5%90%91%E4%B8%80%E4%B8%AAbmap%E6%95%B0%E7%BB%84%EF%BC%8C%E5%AD%98%E5%82%A8%E5%A4%9A%E4%B8%AA%E6%97%A7%E6%A1%B6%EF%BC%8C%E7%94%A8%E4%BA%8E%E6%89%A9%E5%AE%B9%E3%80%82%203,overflow%E6%98%AF%E4%B8%80%E4%B8%AA%E6%8C%87%E9%92%88%EF%BC%8C%E6%8C%87%E5%90%91%E4%B8%80%E4%B8%AA%E5%85%83%E7%B4%A0%E4%B8%AA%E6%95%B0%E4%B8%BA2%E7%9A%84%E6%95%B0%E7%BB%84%EF%BC%8C%E6%95%B0%E7%BB%84%E7%9A%84%E7%B1%BB%E5%9E%8B%E6%98%AF%E4%B8%80%E4%B8%AA%E6%8C%87%E9%92%88%EF%BC%8C%E6%8C%87%E5%90%91%E4%B8%80%E4%B8%AAslice%EF%BC%8Cslice%E7%9A%84%E5%85%83%E7%B4%A0%E6%98%AF%E6%A1%B6%20%28bmap%29%E7%9A%84%E5%9C%B0%E5%9D%80%EF%BC%8C%E8%BF%99%E4%BA%9B%E6%A1%B6%E9%83%BD%E6%98%AF%E6%BA%A2%E5%87%BA%E6%A1%B6%E3%80%82%20%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%89%E4%B8%A4%E4%B8%AA%EF%BC%9F%20%E5%9B%A0%E4%B8%BAGo%20map%E5%9C%A8%E5%93%88%E5%B8%8C%E5%86%B2%E7%AA%81%E8%BF%87%E5%A4%9A%E6%97%B6%EF%BC%8C%E4%BC%9A%E5%8F%91%E7%94%9F%E6%89%A9%E5%AE%B9%E6%93%8D%E4%BD%9C%E3%80%82%20%5B0%5D%E8%A1%A8%E7%A4%BA%E5%BD%93%E5%89%8D%E4%BD%BF%E7%94%A8%E7%9A%84%E6%BA%A2%E5%87%BA%E6%A1%B6%E9%9B%86%E5%90%88%EF%BC%8C%20%5B1%5D%E6%98%AF%E5%9C%A8%E5%8F%91%E7%94%9F%E6%89%A9%E5%AE%B9%E6%97%B6%EF%BC%8C%E4%BF%9D%E5%AD%98%E4%BA%86%E6%97%A7%E7%9A%84%E6%BA%A2%E5%87%BA%E6%A1%B6%E9%9B%86%E5%90%88%E3%80%82%20overflow%E5%AD%98%E5%9C%A8%E7%9A%84%E6%84%8F%E4%B9%89%E5%9C%A8%E4%BA%8E%E9%98%B2%E6%AD%A2%E6%BA%A2%E5%87%BA%E6%A1%B6%E8%A2%ABgc%E3%80%82">Go map的底层原理（存储、扩容）golang map扩容原理-CSDN博客</a></li>
</ol>
<p><strong>增量扩容：</strong><br>Go采用的是增量扩容方案，当map开始扩容后，每一次map操作都会触发一部分扩容搬迁工作（每进行一次赋值，会做至少一次搬迁工作）。由hmap中的nevacuate成员记录当前的搬迁进度。</p>
<p><strong>扩容情况一：存储的键值对数量过多</strong></p>
<ul>
<li>这种情况下map会进行翻倍扩容。</li>
<li>Go创建一个新的buckets数组，这个buckets数组的容量是旧buckets数组的两倍，并将旧数组的数据逐步迁移至新数组。</li>
<li>旧的buckets数组不会被直接删除，而是会把原来对旧数组的引用去掉，让GC来清除内存。</li>
</ul>
<p><strong>扩容情况二：溢出桶数量过多</strong></p>
<ul>
<li>如果出现了这种情况，可能是因为哈希表里有过多的空键值对，很多桶的内部出现了空洞（装不满）。这个时候就需要通过map扩容做内存整理。目的就是为了清除bmap桶中空闲的键值对。</li>
<li>这种情况下map扩容步骤与情况一基本相同，只不过扩容后map容量还是原来的大小。Go会创建一个与原buckets数组容量相同的buckets数组，并将旧数组的数据逐步迁移至这个新数组。再去除旧数组的引用，让GC来清除内存。</li>
</ul>
<p><a href="https://www.topgoer.cn/docs/gozhuanjia/gochan4">chan - 地鼠文档 (topgoer.cn)</a></p>
<h2 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h2><ol>
<li>redis数据不丢失问题</li>
</ol>
<ul>
<li>持久化：Redis提供了两种持久化方式，分别是RDB持久化和AOF持久化。RDB持久化会在指定的时间间隔内将数据集快照写入磁盘，而AOF持久化则会将写命令追加到文件末尾。通过这两种方式，即使Redis意外关闭，也可以通过加载持久化文件来恢复数据。  </li>
<li>主从复制：Redis支持主从复制，可以将主节点的数据复制到多个从节点。在主节点发生故障时，可以选择一个从节点提升为主节点，从而保证数据的持久性和高可用性。  </li>
<li>数据备份：定期对Redis数据进行备份，可以通过快照或者复制Redis持久化文件来进行备份。这样即使发生数据丢失的情况，也可以通过备份数据进行恢复。  </li>
<li>高可用性方案：使用Redis的集群模式或者配合其他高可用性方案，如Sentinel或Redis Cluster，来保证Redis服务的高可用性，从而避免数据丢失。  </li>
</ul>
<p>通过以上方式，Redis可以有效地保证数据不丢失。</p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>八股</tag>
        <tag>go</tag>
      </tags>
  </entry>
</search>
